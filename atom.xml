<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/atom-style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Unplanned Obsolescence</title>
    <subtitle>A blog about trying to write software that doesn&#x27;t rot</subtitle>
    <link rel="self" type="application/atom+xml" href="https://unplannedobsolescence.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-10-11T00:00:00+00:00</updated>
    <id>https://unplannedobsolescence.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Building the Hundred-Year Web Service</title>
        <published>2024-10-11T00:00:00+00:00</published>
        <updated>2024-10-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/building-the-hundred-year-web-service/"/>
        <id>https://unplannedobsolescence.com/blog/building-the-hundred-year-web-service/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/building-the-hundred-year-web-service/">&lt;style&gt;
iframe {
  display: block;
  margin: 10px auto;
}
&lt;&#x2F;style&gt;
&lt;p&gt;My &lt;a href=&quot;https:&#x2F;&#x2F;utahjs.com&#x2F;&quot;&gt;UtahJS&lt;&#x2F;a&gt; talk, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=lASLZ9TgXyc&quot;&gt;&amp;quot;Building the Hundred-Year Web Service&amp;quot;&lt;&#x2F;a&gt;, was put online this week!
It&#x27;s about how to build software infrastructure that lasts a very long time.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re not a software engineer (very unlikely that you&#x27;re reading this blog if so, but it&#x27;s possible) the first 11 minutes of the talk are non-technical, and have some insights about the future of the internet that I hope to expand on soon, in other contexts.
So it&#x27;s worth watching up until that point, before I start explaining to web developers how I think they should be making web services.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;lASLZ9TgXyc?si=QbvceWOSzarlGWVr&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is my first stab at publicly articulating something that has been on my mind for a while: is it possible to build software infrastructure with longevity and maintenance characteristics that rival those of physical infrastructure?
A lot of people think this is basically impossible—our computational capabilities are increasing too rapidly, and our software is changing too frequently, that the only way to keep up is a constant and significant expenditure of resources.
I disagree.&lt;&#x2F;p&gt;
&lt;p&gt;In the talk, I analogize this moment in software to the building of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Williamsburg_Bridge&quot;&gt;Williamsburg Bridge&lt;&#x2F;a&gt;.
The Williamsburg Bridge was conceived in the 1800s, and built with horse-drawn carriage in mind, yet we&#x27;ve been able to adapt that structure to the needs of a 21st-century city (well, sort of; it should have more bike lanes, but that&#x27;s a political problem).
Maintaining that bridge today, we make use of the work of engineers who could not possibly have imagined what we&#x27;re using it for; the invention of the automobile did not require us to &lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2000&#x2F;04&#x2F;06&#x2F;things-you-should-never-do-part-i&#x2F;&quot;&gt;&amp;quot;write&amp;quot; the bridge from scratch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you consider what software abstractions could plausibly be used to build hundred-year software infrastructure, so far there&#x27;s really only one: The Web.
This talk takes seriously the idea that something you put online today could remain online and useful for 100 years, and walks through some technology choices that I believe would make that outcome more likely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dw&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tl-dw&quot; aria-label=&quot;Anchor link for: tl-dw&quot;&gt;tl;dw&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.wesleyac.com&#x2F;posts&#x2F;consider-sqlite&quot;&gt;Use SQLite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Describe the actions of your service with &lt;a href=&quot;https:&#x2F;&#x2F;alexanderpetros.com&#x2F;triptych&#x2F;form-http-methods#REST-in%20Practice&quot;&gt;HTTP verbs and methods&lt;&#x2F;a&gt; as much as possible&lt;&#x2F;li&gt;
&lt;li&gt;Write plain HTML (with templates); enhance it sparsely; use isolated scripts.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are a lot of specifics in the second half of the talk, and &lt;a href=&quot;&#x2F;blog&quot;&gt;this blog you&#x27;re reading now&lt;&#x2F;a&gt; has other explainers that synthesize with that design philosophy.&lt;&#x2F;p&gt;
&lt;p&gt;And of course, the ideas expressed here are why it&#x27;s so important to (carefully, deliberately) &lt;a href=&quot;https:&#x2F;&#x2F;alexanderpetros.com&#x2F;triptych&#x2F;&quot;&gt;enhance HTML with proper HTTP Method support and more dynamic functionality&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Less htmx is More</title>
        <published>2024-10-02T00:00:00+00:00</published>
        <updated>2024-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/less-htmx-is-more/"/>
        <id>https://unplannedobsolescence.com/blog/less-htmx-is-more/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/less-htmx-is-more/">&lt;p&gt;It&#x27;s been two years since I wrote my first production webservice with &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;htmx&lt;&#x2F;a&gt;.
Two years is not a very long time, but early indicators suggest that the software projects I&#x27;ve written with htmx are a much better experience for users, and orders of magnitude easier to maintain, than the software projects they replaced.
They are likely to remain useful for longer than anything else I&#x27;ve ever written (so far).
Pretty good!&lt;&#x2F;p&gt;
&lt;p&gt;Like any new tool, especially a tool that got popular &lt;a href=&quot;https:&#x2F;&#x2F;risingstars.js.org&#x2F;2023&#x2F;en#section-framework&quot;&gt;as quickly as htmx&lt;&#x2F;a&gt;, there are differing schools of thought on how best to use it.
My approach—which I believe necessary to achieve the results described above—requires you to internalize something that htmx certainly hints at, but doesn&#x27;t enforce: use plain HTML &lt;em&gt;wherever possible&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once you get the hang of it, htmx starts pushing you in this direction anyway, and you start reaching for htmx less and less.
It requires a mindset shift though, especially if you&#x27;re not accustomed to &lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;behavior-belongs-in-html&#x2F;&quot;&gt;building page behavior with HTML features&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-should-we-use-htmx&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-should-we-use-htmx&quot; aria-label=&quot;Anchor link for: how-should-we-use-htmx&quot;&gt;How should we use htmx?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In my opinion, most websites should be using htmx for either:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Updates that users would not expect to see on a refresh (or a new page load)&lt;&#x2F;li&gt;
&lt;li&gt;Updates that would &lt;em&gt;also&lt;&#x2F;em&gt; be present on a refresh (or a new page load)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Everything else should use &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;a&quot;&gt;regular links&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;form&quot;&gt;regular forms&lt;&#x2F;a&gt; that do standard, full-page navigations.&lt;&#x2F;p&gt;
&lt;aside&gt;
You also currently need htmx (or an equivalent library) to enable support for PUT and DELETE on regular forms.
More in that in the &lt;a href=&quot;#notes&quot;&gt;notes section.&lt;&#x2F;a&gt;
&lt;&#x2F;aside&gt;
&lt;p&gt;Let&#x27;s say you&#x27;re making a website that shows today&#x27;s baseball games, and you want it to update the stats live.
Here&#x27;s how I would approach that.&lt;&#x2F;p&gt;
&lt;p&gt;The website&#x27;s home page should have all the currently-playing games on it, showing the live score for each one.
Each of those live scoreboards uses htmx to &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-trigger&#x2F;#polling&quot;&gt;poll the server&lt;&#x2F;a&gt; at regular intervals for updates.
Clicking on the scoreboard title (which is a regular &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; link) takes you to that game&#x27;s page, at its own URL.
The game page has not just the score, but the pitch count, the game&#x27;s full box score, and so on;
these update with htmx as well.&lt;&#x2F;p&gt;
&lt;p&gt;The idea here is that the website still has a sound URL structure, which is managed by the core browser functionality, while interactivity is carefully layered on top, with targeted updates.
Exactly what merits a targeted update versus a new page depends on what you&#x27;re building, but you should have a mental model that distinguishes between them in some capacity.&lt;&#x2F;p&gt;
&lt;aside&gt;
Using htmx to enable specific, isolated functionality—rather than letting it drive the overall experience—is arguably &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;is-htmx-another-javascript-framework&#x2F;&quot;&gt;using it like a library, instead of a framework&lt;&#x2F;a&gt;.
&lt;&#x2F;aside&gt;
&lt;p&gt;Unfortunately, a lot of the beginner guides suggest that you can get started easily by &amp;quot;upgrading&amp;quot; all your links with &lt;code&gt;hx-boost&lt;&#x2F;code&gt;.
I disagree with this.
While htmx is amazing for targeted page updates, I highly discourage using it to take over &lt;em&gt;all&lt;&#x2F;em&gt; page navigation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-hx-boost&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-hx-boost&quot; aria-label=&quot;Anchor link for: what-is-hx-boost&quot;&gt;What is hx-boost?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-boost&#x2F;&quot;&gt;&lt;code&gt;hx-boost&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is an attribute that converts a &amp;quot;regular&amp;quot; link into a &amp;quot;boosted&amp;quot; link:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- normal link --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Example&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- boosted link --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example.com &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hx-boost&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Example&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of doing a full page navigation when the &amp;quot;boosted&amp;quot; link is clicked, htmx will issue an HTTP request to the link&#x27;s URL and replace the &lt;code&gt;&amp;lt;body&amp;gt;&lt;&#x2F;code&gt; of the page with the content of the response.
In theory, this feels &amp;quot;smoother&amp;quot; because it only repaints part of the page, mimicking the feel of a Single-Page Application (SPA).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-wrong-with-hx-boost&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-wrong-with-hx-boost&quot; aria-label=&quot;Anchor link for: what-s-wrong-with-hx-boost&quot;&gt;What&#x27;s wrong with hx-boost?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The problems it solves are better solved by other means, and it creates a lot of problems on its own.&lt;&#x2F;p&gt;
&lt;p&gt;Use &lt;code&gt;hx-boost&lt;&#x2F;code&gt; long enough, and something will go wrong.
You&#x27;ll click the back button and see only a partial page update;
you&#x27;ll refresh the page and it&#x27;ll go blank;
another library that you&#x27;re using will conk out;
elements will enter or exit the DOM in a way that you did not expect.&lt;&#x2F;p&gt;
&lt;p&gt;From a coding perspective, this is not anyone&#x27;s fault—the features promised by &lt;code&gt;hx-boost&lt;&#x2F;code&gt; are impossible.
&lt;code&gt;hx-boost&lt;&#x2F;code&gt; uses the JavaScript &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;History_API&quot;&gt;History API&lt;&#x2F;a&gt;, which exists to let single-page apps (SPAs) hook into session management functionality, most notably the browser&#x27;s forward and back buttons.
In practice, this is virtually impossible to get right, and is so annoying to implement that htmx creator Carson Gross made &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;img&#x2F;memes&#x2F;javascripthistory.png&quot;&gt;a meme&lt;&#x2F;a&gt; about it.&lt;&#x2F;p&gt;
&lt;p&gt;The core problem is that with normal page navigation, each link you click resets the JavaScript environment and triggers a full set of page &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document&#x2F;DOMContentLoaded_event&quot;&gt;lifecycle events&lt;&#x2F;a&gt;.
This is a very good thing.
It means that every additional script you include on the page has a standardized way to keep track of what&#x27;s happening.
If you replace this process with an ad-hoc, scripting-based navigation, you remove access to that common language for every other library on your page.
You also initiate a long-lived JavaScript environment that is likely to eventually enter a bad state of some kind.&lt;&#x2F;p&gt;
&lt;p&gt;This problem is inherent to SPAs, and it can only be resolved by not writing SPAs.
So don&#x27;t use the attribute that turns your htmx site into an SPA.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-should-i-do-instead&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-should-i-do-instead&quot; aria-label=&quot;Anchor link for: what-should-i-do-instead&quot;&gt;What should I do instead?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;a&quot;&gt;regular links&lt;&#x2F;a&gt;. &lt;code&gt;hx-boost&lt;&#x2F;code&gt; promises to enhance the experience of a regular link; skip the middleman and just use them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;hard-page-load&#x2F;&quot;&gt;Regular links are a better user experience and developer experience&lt;&#x2F;a&gt;, full stop.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-about-the-benefits-of-hx-boost&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-the-benefits-of-hx-boost&quot; aria-label=&quot;Anchor link for: what-about-the-benefits-of-hx-boost&quot;&gt;What about the benefits of hx-boost?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first time you use &lt;code&gt;hx-boost&lt;&#x2F;code&gt;, it feels magical to have the page update &amp;quot;seamlessly&amp;quot; like that, but you can achieve all the same benefits, without the headaches, using browser features.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;send-cache-headers-to-re-use-css-and-js-across-page-loads&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#send-cache-headers-to-re-use-css-and-js-across-page-loads&quot; aria-label=&quot;Anchor link for: send-cache-headers-to-re-use-css-and-js-across-page-loads&quot;&gt;Send cache headers to re-use CSS and JS across page loads&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Basically all static file servers support &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&#x2F;ETag&quot;&gt;ETags&lt;&#x2F;a&gt;.
When the server sends the browser a file, it can also send a unique string that identifies &lt;em&gt;that version&lt;&#x2F;em&gt; of the file.
The next time you try to load that file (after, for instance, navigating to a new page that uses the same CSS), the browser asks your server, &amp;quot;is it still this one?&amp;quot;, and sends that ETag string.
If the file hasn&#x27;t changed, the server just responds with a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Status&#x2F;304&quot;&gt;304 Not Modified&lt;&#x2F;a&gt; header and the browser users its cached version.&lt;&#x2F;p&gt;
&lt;p&gt;In most cases, this is process adds essentially nothing to your load times.
The browser has to talk to the server anyway to get whatever info is on the next page, and it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc2616#section-8.1&quot;&gt;re-using the same TCP connection&lt;&#x2F;a&gt; to do so.
The GET -&amp;gt; 304 back-and-forth is a handful of extra bytes on an already-open socket.&lt;&#x2F;p&gt;
&lt;p&gt;But if you don&#x27;t want the browser to even &lt;em&gt;ask&lt;&#x2F;em&gt;, you can do that do by setting a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&#x2F;Cache-Control#response_directives&quot;&gt;cache control header&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how I load htmx in all the websites where I use it.
We&#x27;ll use version 1.9.3 as an example.
I include a script tag like this in the header:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;htmx-1.9.3.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the user loads the page for the very first time, their browser sends the HTTP request &lt;code&gt;GET &#x2F;htmx-1.9.3.js&lt;&#x2F;code&gt; to my server.
The server will send back something like this in response:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;http&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-http &quot;&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span&gt;HTTP&#x2F;2 200
&lt;&#x2F;span&gt;&lt;span&gt;accept-ranges: bytes
&lt;&#x2F;span&gt;&lt;span&gt;cache-control: public, max-age=31536000
&lt;&#x2F;span&gt;&lt;span&gt;last-modified: Fri, 06 Sep 2024 22:09:43 GMT
&lt;&#x2F;span&gt;&lt;span&gt;etag: W&#x2F;&amp;quot;24b79-191c962d458&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;content-type: application&#x2F;javascript; charset=UTF-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That says: &amp;quot;download htmx 1.9.3 from my server exactly once, and then never ask me for it again for &lt;em&gt;a full calendar year&lt;&#x2F;em&gt;.&amp;quot;
From that point on, for one year, every time that browser loads a page at the same domain that includes htmx 1.9.3, the browser won&#x27;t even ask the server for it, it&#x27;ll just use the saved version.
If I want to upgrade everyone to a new version, I just change the version number in the URL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- From this... --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;htmx-1.9.3.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- ...to this --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;htmx-1.9.4.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next time each of my users loads that page, their browsers will see that the page requires a new file it doesn&#x27;t have, and ask for the server for it again.&lt;&#x2F;p&gt;
&lt;p&gt;If I don&#x27;t even want to include a version number—maybe for a file like &lt;code&gt;stylesheet.css&lt;&#x2F;code&gt;—I can use a URL query.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- The browser will consider these two different files,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;      but your server will know that they&amp;#39;re the same --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;stylesheet.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;stylesheet.css?id=1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, basically every static file server supports this pattern.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;use-same-origin-links-to-get-partial-page-updates&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-same-origin-links-to-get-partial-page-updates&quot; aria-label=&quot;Anchor link for: use-same-origin-links-to-get-partial-page-updates&quot;&gt;Use same-origin links to get partial page updates&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This website (&lt;a href=&quot;&#x2F;&quot;&gt;unplannedobsolescence.com&lt;&#x2F;a&gt;) uses exclusively regular links, and if you click around up top you&#x27;ll see that the header largely stays in place.
This happens automatically now, for same-origin links to pages with the same structure and stylesheets (like I showed you above).&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the Chrome team &lt;a href=&quot;https:&#x2F;&#x2F;developer.chrome.com&#x2F;blog&#x2F;paint-holding&quot;&gt;announcing this feature&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Try Paint Holding in Chrome Canary (Chrome 76) and let us know what you think. Developers shouldn&#x27;t have to worry about making any modifications to their pages to take advantage of it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Chrome 76 came out four years ago, in 2019.
Everyone who built their website with regular links got a significant, free performance upgrade to their website pushed out to billions of people;
the same is not true for everyone who tried to replace that functionality with JavaScript.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leverage-html-for-free-performance-upgrades&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#leverage-html-for-free-performance-upgrades&quot; aria-label=&quot;Anchor link for: leverage-html-for-free-performance-upgrades&quot;&gt;Leverage HTML for free performance upgrades&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Using standard HTML features allows the browser to optimize performance and UX in ways that JavaScript is categorically incapable of.
Every time the browser updates it is getting better at loading, parsing, and rendering webpages.
Page history, loading bars, the back button, the cancel button, the URL bar, etc., all work correctly, by default, every time, on every browser.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;hard-page-load&#x2F;#in-the-long-run-the-browser-always-wins&quot;&gt;In the long run, the browser always wins.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-does-hx-boost-exist-then&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-does-hx-boost-exist-then&quot; aria-label=&quot;Anchor link for: why-does-hx-boost-exist-then&quot;&gt;Why does hx-boost exist then?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;htmx was created during a period in which it seemed like SPAs were the inevitable future of web development.
To compete in that environment, it had to demonstrate that it could replicate what most people considered to be the killer feature of SPAs: not repainting the whole page.
If this was ever necessary—I&#x27;m skeptical—it&#x27;s sure not necessary anymore.&lt;&#x2F;p&gt;
&lt;p&gt;Now that htmx has proven itself in the mindshare ecosystem, and developers are starting to trust multi-page websites again, I think the time has come to make the harder, but ultimately more impactful case: HTML and HTTP have the features required to build the vast, vast majority of website functionality; they&#x27;re easier to use than the scripting alternatives, and they last longer with much less maintenance.&lt;&#x2F;p&gt;
&lt;aside&gt;
Users always trusted multi-page websites, by the way.
We&#x27;re just now starting to listen to them again.
&lt;&#x2F;aside&gt;
&lt;p&gt;Building good websites requires dropping the sugar high of &lt;code&gt;hx-boost&lt;&#x2F;code&gt; and saying &amp;quot;here&#x27;s how to use a cache header.&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-there-ever-a-time-i-should-use-htmx-to-make-an-spa&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-there-ever-a-time-i-should-use-htmx-to-make-an-spa&quot; aria-label=&quot;Anchor link for: is-there-ever-a-time-i-should-use-htmx-to-make-an-spa&quot;&gt;Is there ever a time I should use htmx to make an SPA?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My friend &lt;a href=&quot;https:&#x2F;&#x2F;aramzs.xyz&#x2F;&quot;&gt;Aram&lt;&#x2F;a&gt; made a website called &lt;a href=&quot;https:&#x2F;&#x2F;songobsessed.com&quot;&gt;Song Obsessed&lt;&#x2F;a&gt; that has a persistent music player which holds its state even as you navigate around the site.
&lt;code&gt;hx-boost&lt;&#x2F;code&gt; is a good fit for this because it allows you to construct your website as a series of URLs; you can just slap &lt;code&gt;hx-boost&lt;&#x2F;code&gt; on everything and, with a little tweaking, you can get htmx to leave the music player alone while replacing the rest of the page.
You still lost the reliability inherent in the hard page load, but you get genuinely novel functionality in exchange, which is a good trade in this case.
Until HTML has an API to keep live content persistent across page navigations, some SPA functionality is required to make that happen.&lt;&#x2F;p&gt;
&lt;p&gt;SPAs are an &lt;em&gt;advanced&lt;&#x2F;em&gt; tool that the industry deceptively marketed as a simple one.
Aram is a highly experienced web developer who&#x27;s using &lt;code&gt;hx-boost&lt;&#x2F;code&gt; to push the boundaries of what&#x27;s possible with page navigations;
Most people, who just want to add a little interactivity to their webpage, should &lt;a href=&quot;https:&#x2F;&#x2F;grugbrain.dev&#x2F;#grug-on-complexity&quot;&gt;stick with the simplest tool available&lt;&#x2F;a&gt;: a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;a&quot;&gt;regular link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Carson Gross his for feedback on a draft of this article. Comments available on &lt;a href=&quot;https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;1uv7e4&#x2F;less_htmx_is_more&quot;&gt;lobste.rs&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alexanderpetros.com&#x2F;triptych&#x2F;&quot;&gt;Triptych&lt;&#x2F;a&gt;—the HTML proposals that Carson and I are working on—would render htmx obsolete for the type of website I describe here.
More advanced htmx features, like the ones used to great effect by &lt;a href=&quot;https:&#x2F;&#x2F;david.guillot.me&#x2F;en&#x2F;posts&#x2F;tech&#x2F;following-up-mother-of-all-htmx-demos&#x2F;&quot;&gt;David Guillot and Contexte&lt;&#x2F;a&gt;, will still require htmx for the foreseeable future.&lt;&#x2F;li&gt;
&lt;li&gt;To add PUT (and DELETE) support to &amp;quot;regular&amp;quot; forms with htmx, add &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-put&#x2F;&quot;&gt;&lt;code&gt;hx-put&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to the form, and then have the server respond with status code 200 and an &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;headers&#x2F;hx-redirect&#x2F;&quot;&gt;&lt;code&gt;HX-Redirect&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; header;
instead of doing partial page replacement, htmx will tell the browser to do a full-page navigation.
This mimics the POST-Redirect-GET pattern, but uses a header instead of a 303 response.&lt;&#x2F;li&gt;
&lt;li&gt;Ideally, htmx would be able to intercept a normal 303 response and use the &lt;code&gt;location&lt;&#x2F;code&gt; header, instead of a custom header, but because of limitations in the fetch API (&lt;code&gt;manual&lt;&#x2F;code&gt; redirects &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;RequestInit#redirect&quot;&gt;hide all the headers&lt;&#x2F;a&gt;), it can&#x27;t.
I don&#x27;t totally understand what security purpose this serves, to be honest, but it&#x27;s a bit of a shame, because it means that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexpetros&#x2F;triptych?tab=readme-ov-file#limitations&quot;&gt;you can&#x27;t make a proper polyfill&lt;&#x2F;a&gt; for PUT and DELETE forms.&lt;&#x2F;li&gt;
&lt;li&gt;Both &lt;a href=&quot;https:&#x2F;&#x2F;dev.37signals.com&#x2F;a-happier-happy-path-in-turbo-with-morphing&#x2F;&quot;&gt;turbo&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;data-star.dev&#x2F;essays&#x2F;another_dependency#fn:1&quot;&gt;datastar&lt;&#x2F;a&gt; use Carson&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bigskysoftware&#x2F;idiomorph&quot;&gt;idiomorph&lt;&#x2F;a&gt; algorithm to merge updates into the page, but Carson ended up rejecting idiomorph as the default merging algorithm for htmx, because it was too complicated—even though he&#x27;s the one who created it in the first place!
The default &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-swap&#x2F;&quot;&gt;htmx swap strategy&lt;&#x2F;a&gt; is to just wipe away what&#x27;s inside the &lt;code&gt;innerHTML&lt;&#x2F;code&gt; and replace it with the response—not unlike how the default page navigation is to wipe away the environment and give you a fresh one.
Simple; effective.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Messy Pile</title>
        <published>2024-08-01T00:00:00+00:00</published>
        <updated>2024-08-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/messy-pile-css/"/>
        <id>https://unplannedobsolescence.com/blog/messy-pile-css/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/messy-pile-css/">&lt;p&gt;A couple months ago I was sitting next to &lt;a href=&quot;https:&#x2F;&#x2F;ivywong.dev&quot;&gt;Ivy Wong&lt;&#x2F;a&gt; and I saw them working on
a dropdown menu so cute that I immediately asked how they did it.&lt;&#x2F;p&gt;
&lt;p&gt;It looked something like this:&lt;&#x2F;p&gt;
&lt;style&gt;
ul.base {
  list-style-type: none;
  margin: 0 auto;
  padding: 0;
  width: fit-content;
}

.base li {
  background-color: bisque;
  border: 2px black solid;
  margin: 5px 0;
  text-align: center;
  width: 200px;
}

.messy-pile li:nth-child(odd) {
  transform: rotate(1deg);
}

.messy-pile li:nth-child(even) {
  transform: rotate(-1deg);
}
&lt;&#x2F;style&gt;
&lt;ul class=&quot;base messy-pile&quot;&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Pages
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;p&gt;I call this the Messy Pile, and I think it&#x27;s brilliant. It has lots of personality without breaking
the basic utility and structure of a menu list.
Internally, it feels haphazard; externally, it takes up a very normal box shape on the page, which
easily fits in both desktop and mobile views.&lt;&#x2F;p&gt;
&lt;ul class=&quot;base messy-pile&quot; style=&quot;border: 2px solid red;&quot;&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Pages
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s make it together. We&#x27;ll start with just a regular list of items:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Pages
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;p&gt;And then add some CSS to make them orderly boxes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  list-style-type: none;
&lt;&#x2F;span&gt;&lt;span&gt;  margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;auto;
&lt;&#x2F;span&gt;&lt;span&gt;  padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  width: fit-content;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  background-color: bisque;
&lt;&#x2F;span&gt;&lt;span&gt;  border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2px &lt;&#x2F;span&gt;&lt;span&gt;black solid;
&lt;&#x2F;span&gt;&lt;span&gt;  margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5px 0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  text-align: center;
&lt;&#x2F;span&gt;&lt;span&gt;  width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul class=&quot;base&quot;&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Pages
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;p&gt;And finally, we rotate the boxes, one degree clockwise for the odd-numbered items, and counterclockwise for the even-numbered ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-child(odd) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1deg&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-child(even) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-1deg&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you get these cute tilted boxes!&lt;&#x2F;p&gt;
&lt;ul class=&quot;base messy-pile&quot;&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Pages
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;better-css-leads-to-better-html&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#better-css-leads-to-better-html&quot; aria-label=&quot;Anchor link for: better-css-leads-to-better-html&quot;&gt;Better CSS Leads to Better HTML&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Ivy&#x27;s dense yet simple implementation of this pattern highlights something that took me a long time to learn: it&#x27;s only possible to write good HTML if you write good CSS.&lt;&#x2F;p&gt;
&lt;p&gt;If you showed someone this design and asked them to implement it, it&#x27;s easy to imagine an implementation that looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item left&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;New&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item left&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Pages&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Logout&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- the common styling is omitted for brevity --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1deg&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-1deg&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I could definitely have written that depending on when in my career you asked me to do it.
So what&#x27;s better about this one?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- the common styling is omitted for brevity --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-child(odd) &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1deg&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;messy-pile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-child(even) &lt;&#x2F;span&gt;&lt;span&gt;{ transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-1deg&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An obvious reason is that using the CSS &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;:nth-child&quot;&gt;&lt;code&gt;:nth-child()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; pseudo-class (along with its &lt;code&gt;odd&lt;&#x2F;code&gt; and &lt;code&gt;even&lt;&#x2F;code&gt; keyword values) ensures that the pattern will automatically apply to an arbitrary number of items, as opposed to manually switching between  &lt;code&gt;left&lt;&#x2F;code&gt; and &lt;code&gt;right&lt;&#x2F;code&gt; classes.&lt;&#x2F;p&gt;
&lt;p&gt;Add new items, or move existing ones, and they&#x27;ll all stay perfectly arranged, without touching the CSS.&lt;&#x2F;p&gt;
&lt;ul class=&quot;base messy-pile&quot;&gt;
  &lt;li&gt;Home
  &lt;li&gt;New
  &lt;li&gt;Friends
  &lt;li&gt;Pages
  &lt;li&gt;Explore
  &lt;li&gt;Logout
&lt;&#x2F;ul&gt;
&lt;p&gt;A subtler reason is that writing better CSS lets us move redundant information out of the HTML, dramatically simplifying it.
In doing so, we take advantage of both CSS features and HTML semantics.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the only HTML in our example.
You&#x27;ll notice that it&#x27;s just a regular &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;ul&quot;&gt;unordered list&lt;&#x2F;a&gt;.
Its purpose is immediately clear and it&#x27;s not visually dense in the slightest.
The only concession we&#x27;ve made to the styling is a single class, &lt;code&gt;messy-pile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The list semantics give us a natural way to style this component,
Lists &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;ul#technical_summary&quot;&gt;pretty much&lt;&#x2F;a&gt; only have &lt;code&gt;&amp;lt;li&amp;gt;&lt;&#x2F;code&gt; children, so we can style the list itself with &lt;code&gt;.messy-pile&lt;&#x2F;code&gt; and the items with &lt;code&gt;.messy-pile li&lt;&#x2F;code&gt;.
There&#x27;s very little we have to add to the HTML to make this work.&lt;&#x2F;p&gt;
&lt;p&gt;HTML semantics are often discussed in the context of making it easier for user agents (browsers, accessibility tech, etc.) to understand what your web page is trying to accomplish—but they also make it easier for &lt;em&gt;you&lt;&#x2F;em&gt; (and future readers of your code) to understand what your web page is trying to accomplish.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the other sample implementation from before; it does the same thing but with most of the HTML semantics removed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is much worse.
We have to add classes to both the container and the list item, since &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt; is a generic element that could contain lots of things, including other &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt;s.
The additional visual weight takes more time to read, feels bad to look at, and has none of the same accessibility properties.&lt;&#x2F;p&gt;
&lt;p&gt;This example is trivial—the version with the divs is still very intelligible—but as you start to layer on additional concepts, it gets out of hand quickly. For instance, the items in this example are mean to be a menu bar, so they all have to be links. With a list, that&#x27;s still pretty easy to read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- With a list --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;new&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;logout&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Definitely busier, but still easy to follow.
How does it look with divs?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- With divs --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-container&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;new&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;New&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;new&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Pages&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;messy-pile-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;logout&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Logout&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh. It&#x27;s starting to become XML (derogatory).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m being a little cheeky here by &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;li#technical_summary&quot;&gt;omitting the closing tags&lt;&#x2F;a&gt; for &lt;code&gt;&amp;lt;li&amp;gt;&lt;&#x2F;code&gt; elements to keep the &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; tags on the same line, while not doing the same for the &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt;s.
But that&#x27;s also my point!
&lt;code&gt;&amp;lt;li&amp;gt;&lt;&#x2F;code&gt; tags can be closed automatically, &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt; tags can&#x27;t.
Knowing HTML semantics lets you express your ideas more concisely, which in turn gives you more room to layer on new ideas before you start to feel the pressure to refactor.&lt;&#x2F;p&gt;
&lt;p&gt;Meanwhile, the div version looks and feels like a compile target—which is exactly why lots of people treat it as one.
When your HTML is lots of divs and classes, then higher level abstractions like &lt;a href=&quot;https:&#x2F;&#x2F;react.dev&#x2F;learn&#x2F;your-first-component&quot;&gt;React Components&lt;&#x2F;a&gt; are necessary to make the code you&#x27;re writing intelligible again.
Many people start from the assumptions that these abstractions are necessary because they&#x27;ve only ever seen code that&#x27;s painful to write without them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-does-it-scale&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-does-it-scale&quot; aria-label=&quot;Anchor link for: but-does-it-scale&quot;&gt;But Does It Scale?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The reason we adopt additional abstractions on top of HTML semantics is because eventually the thing we&#x27;re trying to describe gets more complicated.
It happens even with the most beautifully-written HTML.
Reality—or at least the little piece of the reality that we&#x27;re trying to make easier with software—is complicated.&lt;&#x2F;p&gt;
&lt;p&gt;So if you&#x27;re reading this and thinking, &amp;quot;sure, but what I&#x27;m doing could never be done with plain HTML and CSS,&amp;quot; I humbly suggest that you give it a try.
You won&#x27;t know what HTML and CSS can and can&#x27;t accomplish until you actually try to push their limits for your use-case, forcing yourself to find those native features.
I, personally, have found that they go a lot farther than I previously thought.&lt;&#x2F;p&gt;
&lt;p&gt;Complex page layouts are going to require compromises—the trick is to use the tools available to you to push those compromises as far out as possible.
The better you know your tools, the farther you can get before you have to fashion new ones, and the simpler the abstractions you develop are going to be.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This blog is about an interaction that Ivy and I had at the &lt;a href=&quot;https:&#x2F;&#x2F;www.recurse.com&#x2F;scout&#x2F;click?t=044d120abf1c334d0b2a3132634eb025&quot;&gt;Recurse Center&lt;&#x2F;a&gt;. If you love programming and are interested in expanding your horizons, you should check it out.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;If the unclosed &lt;code&gt;&amp;lt;li&amp;gt;&lt;&#x2F;code&gt; tags bother you, check out Aaron Parks&#x27; &lt;cite class=article&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lofi.limo&#x2F;blog&#x2F;write-html-right&quot;&gt;Write HTML Right&lt;&#x2F;a&gt;.&lt;&#x2F;cite&gt;
You may or may not want to write all your HTML that way, but it will hopefully break you out of the idea that HTML should look like XML. Markdown doesn&#x27;t make you close bullets, why should HTML?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getbem.com&#x2F;&quot;&gt;BEM&lt;&#x2F;a&gt; is one popular methodology (among many) for scaling up CSS.
If your project and org chart are operating at a scale that BEM helps with, by all means use it, but I am personally of the opinion that strict conventions tend to age poorly as the language naturally develops internal mechanisms to deal with the problems that the conventions were originally built to solve—that&#x27;s basically the argument of this whole blog.&lt;&#x2F;li&gt;
&lt;li&gt;Also, &lt;code&gt;&amp;lt;button class=&amp;quot;button&amp;quot;&amp;gt;&lt;&#x2F;code&gt; makes me want to die. That simply can&#x27;t be the best way to write CSS.&lt;&#x2F;li&gt;
&lt;li&gt;Speaking of scaling: keep in mind that scaling developers is not a business requirement; scaling your ability to improve the website is.
If you make it easier for a couple developers to manage all the frontend tasks, you don&#x27;t need to be siloing them so much.
This is true both &amp;quot;vertically&amp;quot; (&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-real-world-react-to-htmx-port&#x2F;#dev-team-makeup&quot;&gt;frontend vs backend&lt;&#x2F;a&gt;), and horizontally (different teams working on different parts of the same page).&lt;&#x2F;li&gt;
&lt;li&gt;On the other end of the spectrum is the &lt;a href=&quot;https:&#x2F;&#x2F;csszengarden.com&#x2F;&quot;&gt;CSS Zen Garden&lt;&#x2F;a&gt;, which demonstrates how the same HTML can be used to create dramatically different-looking layouts, just by swapping out the stylesheet.
You certainly &lt;em&gt;don&#x27;t&lt;&#x2F;em&gt; need your website to be ready for arbitrary stylesheets—and I&#x27;m not skilled enough with CSS to pull that off anyway—but you should shoot for a website with sufficiently sane HTML structure that it would easy enough to follow if it had &lt;em&gt;no&lt;&#x2F;em&gt; styling.&lt;&#x2F;li&gt;
&lt;li&gt;I used a modified Messy Pile for the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;&#x2F;code&gt;s in &lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;hard-page-load&#x2F;&quot;&gt;my last blog post&lt;&#x2F;a&gt; You have to be on desktop with a wide enough window to see it applied.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Who&#x27;s Afraid of a Hard Page Load?</title>
        <published>2024-07-16T00:00:00+00:00</published>
        <updated>2024-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/hard-page-load/"/>
        <id>https://unplannedobsolescence.com/blog/hard-page-load/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/hard-page-load/">&lt;p&gt;While I&#x27;m not going to settle the Single-Page Web Application (SPA) debate in a blog post, there is
one claim about SPAs that routinely goes unchallenged, and it drives me nuts: that users prefer
them because of the &amp;quot;modern,&amp;quot; responsive feel.&lt;&#x2F;p&gt;
&lt;p&gt;SPAs achieve their signature feel using partial page replacement: adding or removing DOM elements
instead of loading a new page. Partial page replacement is a very useful feature—I&#x27;m &lt;a href=&quot;https:&#x2F;&#x2F;alexanderpetros.com&#x2F;triptych&#x2F;&quot;&gt;working on an
HTML standards proposal&lt;&#x2F;a&gt; for it right now—but SPAs typically
use them for &lt;em&gt;everything&lt;&#x2F;em&gt;, including page navigation, which causes a lot of problems.&lt;&#x2F;p&gt;
&lt;p&gt;The way this works is that rather than letting the browser load a new page when the user clicks an
&lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; tag, SPAs simulate page navigation by fetching with JavaScript, updating the page, and using
the History API to edit the browser&#x27;s URL bar. &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;NextJS&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;reactrouter.com&#x2F;&quot;&gt;React
Router&lt;&#x2F;a&gt; work this way, as does &lt;a href=&quot;https:&#x2F;&#x2F;kit.svelte.dev&#x2F;&quot;&gt;SvelteKit&lt;&#x2F;a&gt;. Even
the hypermedia libraries support this paradigm, with htmx&#x27;s
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-boost&quot;&gt;&lt;code&gt;hx-boost&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and Hotwire&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;turbo.hotwired.dev&#x2F;handbook&#x2F;drive&quot;&gt;Turbo
Drive&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In theory, avoiding &amp;quot;hard&amp;quot; page navigations has the following benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The app can make instant UI changes to reflect the user&#x27;s click, and fill in information from the
network request when it completes.&lt;&#x2F;li&gt;
&lt;li&gt;The whole page doesn&#x27;t repaint, i.e. the header and navigational links might remain in place while
only the middle of the page changes. This avoids the blank screen that users often see while
waiting for a new page to load.&lt;&#x2F;li&gt;
&lt;li&gt;It allows for fancier transitions between pages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;aside&gt;
This discussion only applies to web applications that can be modeled with
pages, as opposed to something like Google Maps or RuneScape. But, web pages are a very flexible
paradigm, and the chances that you&#x27;re working on web content that cannot be modeled with pages are
very slim.
&lt;&#x2F;aside&gt;
&lt;p&gt;What this does is essentially abstract away the concept of a link, and make the web page feel more
like an application on your phone. No longer are you navigating web pages, you&#x27;re moving around an
app. I have a number of problems with this, but purely from a UX standpoint, it&#x27;s a massive
disservice to web users.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;managing-the-network&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#managing-the-network&quot; aria-label=&quot;Anchor link for: managing-the-network&quot;&gt;Managing the network&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Every day I ride the New York City Subway. For my carrier, most of the stops have cell service, and
most of the tunnels between stops do not. When I read web pages while riding, I am &lt;em&gt;keenly&lt;&#x2F;em&gt; aware
that if I click a link while I don&#x27;t have service, not only will the page fail to load, I will
probably also lose access to the one I&#x27;m currently reading. Everyone who uses a web browser
understands this behavior on some level. So I avoid clicking links until I&#x27;m at a stop.&lt;&#x2F;p&gt;
&lt;aside&gt;
I use the subway as an example to highlight that managing unreliable internet is a daily occurrence
even in the most urban environments. Naturally, this concern is magnified in rural areas, which is
why I&#x27;m deeply skeptical of the claim that SPAs somehow benefit people with slow or unstable
internet connections.
&lt;&#x2F;aside&gt;
&lt;p&gt;Occasionally though, I&#x27;ll mis-time it, and click a link right as the subway is pulling out of a
stop: the page fails to load, and now I&#x27;m looking at a blank screen. In that situation, I much
prefer to be on a traditional website than an SPA. On a website like Wikipedia, one that uses hard
links and full page loads, then there&#x27;s a decent chance that the browser can save me: the back
button will usually load the cached version of the page I was just on.&lt;&#x2F;p&gt;
&lt;p&gt;If it&#x27;s an SPA, however, in all likelihood clicking the back button will take me a different, mostly
blank page, and now I&#x27;m just stuck. When the internet comes back, I&#x27;ll refresh the page and
hopefully land in the same place, but maybe not. In fact, my whole attitude towards a website
changes if it feels like an SPA. Subconsciously, I know that I have to baby it, and only use it in
the most optimal network conditions. The smoothness of a web application is an anti-indicator of its
reliability and predictability as a web page.&lt;&#x2F;p&gt;
&lt;p&gt;That anti-indicator holds even in situations without unreliable internet. As a user, I&#x27;m always
much happier when presented with a form that is entirely on one page, or has a &amp;quot;hard&amp;quot; submit button
for each step that takes me to a new page, as opposed to a &amp;quot;seamless&amp;quot; form that exists as a blob of
JS state. The former has relatively predictable submit, autocomplete, and back button behavior,
while the latter varies widely by implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe you don&#x27;t ride the subway. But you&#x27;ve probably driven on a highway with spotty service, or had
a bad Wi-Fi connection, or gotten on a plane, or been inside a basement with weirdly thick walls.
Everyone has had to navigate the web under less-than-ideal network conditions, and you quickly
develop an intuition for which websites will be resilient to them.&lt;&#x2F;p&gt;
&lt;!-- While I can&#x27;t prove it, I am reasonably confident that users have some insight into whether they are --&gt;
&lt;!-- going to get the Wikipedia experience or the &quot;back button borks the entire app&quot; experience --&gt;
&lt;h2 id=&quot;the-web-has-seams-let-them-show&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-web-has-seams-let-them-show&quot; aria-label=&quot;Anchor link for: the-web-has-seams-let-them-show&quot;&gt;The web has seams, let them show&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Developers are naturally inclined to make their applications feel more responsive, and when they
test their SPA, it feels like a more natural experience than a clunky old web page. But this
instinct is usually incorrect, because most websites need to hit the network in response to user
actions.&lt;&#x2F;p&gt;
&lt;p&gt;When a user clicks a link, they want whatever information was at that link—which their device
will have to make a network trip to discover. When a user submits a form, they need to know whether
or not that information was saved to the server, which their device will have to make a network trip
to accomplish.&lt;&#x2F;p&gt;
&lt;p&gt;I suppose there&#x27;s a version of the web that pre-fetches every possible page for you—and that might
feel pretty instantaneous. But there&#x27;s no world where that works for user-submitted data, because
the only thing I care about as a user is that &lt;em&gt;the data actually got submitted&lt;&#x2F;em&gt;. If I submit a form
to a website, the website optimistically and instantaneously shows me that the submission
succeeded, and I later find out that it didn&#x27;t, I am &lt;strong&gt;mad&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;aside&gt;
Have you ever refreshed a page to make sure that your information *really* got saved? Why did you
feel the need to double-check?
&lt;&#x2F;aside&gt;
&lt;p&gt;The friction involved with a hard page load doesn&#x27;t exist because web developers are too lazy to do
performance work—it reflects a real, physical limitation in the system that is beyond the ability of
one developer, and possibly humanity, to overcome. SPAs not only fail to remove the need for the
network call, they diminish the user&#x27;s ability to manage when that network call is made, and &lt;a href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;05&#x2F;08&#x2F;hatoeas-is-for-humans.html&quot;&gt;handle
failure cases&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Discussions of user agency in software are often very... optimistic about how much users want to
exercise that agency. But agency comes in many forms. When I was in 5th grade, I would load up
&lt;a href=&quot;https:&#x2F;&#x2F;gamefaqs.gamespot.com&#x2F;ds&#x2F;924897-final-fantasy-iii&#x2F;faqs&quot;&gt;GameFAQs guides for Final Fantasy
III&lt;&#x2F;a&gt; on my iPod Touch before a road
trip, and in the car I&#x27;d make sure not navigate away from the page, or I&#x27;d lose the guide. When I
avoid clicking links between subways stops, I&#x27;m building on behavior I learned as a child, not as a
software engineer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-the-long-run-the-browser-always-wins&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-the-long-run-the-browser-always-wins&quot; aria-label=&quot;Anchor link for: in-the-long-run-the-browser-always-wins&quot;&gt;In the long run, the browser always wins&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I suspect that the primary impetus for this smoothness is commerce, or something I call
&amp;quot;casino-driven development.&amp;quot; As my Papou used to tell me, casinos do not have clocks because clocks
remind you that time is passing; the casino would like you to forget that time is passing, because
they make more money the longer you remain in the casino. In the ad-based internet attention
economy, the website would like to keep you in their casino as long as possible-the less that
you&#x27;re reminded you&#x27;re on the web, where clicks usually require waiting, the better.&lt;&#x2F;p&gt;
&lt;p&gt;Internet folklore has it that, in the 2000s, Amazon and Google research discovered that for each
&lt;math&gt;X&lt;&#x2F;math&gt; additional millisecond of page load latency they lost &lt;math&gt;Y&lt;&#x2F;math&gt; customers and
therefore &lt;math&gt;Z&lt;&#x2F;math&gt; dollars. I can&#x27;t find any reliable sources for this, but the logic is
sound. Some percentage of people will give up the longer it takes to see a result, and at that
scale, that percentage translates into a lot of lost money.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the problem: your team almost certainly doesn&#x27;t have what it takes to out-engineer the
browser. The browser will continuously improve the experience of plain HTML, at no cost to you,
using a rendering engine that is orders of magnitude more efficient than JavaScript. To beat that,
you need to be continuously investing significant engineering effort into cutting-edge application
work.&lt;&#x2F;p&gt;
&lt;p&gt;Some things you have to consider with SPAs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What happens when users refresh the page?&lt;&#x2F;li&gt;
&lt;li&gt;What happens when users click the back button?&lt;&#x2F;li&gt;
&lt;li&gt;What happens when users click the back button twice?&lt;&#x2F;li&gt;
&lt;li&gt;What happens when users click the back button twice, the forward button once, and then the back
button again?&lt;&#x2F;li&gt;
&lt;li&gt;What happens when users try to open a link in a new tab?&lt;&#x2F;li&gt;
&lt;li&gt;What happens when users users copy the link from the address bar and send it to a friend?&lt;&#x2F;li&gt;
&lt;li&gt;Where does the page focus go when it navigates?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can engineer your way out of basically all the problems I&#x27;ve described here, but it takes
enormous effort. And maintenance on the pile of libraries required to get back basic browser
features like &amp;quot;back button navigation&amp;quot; on your SPA &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;no-build-step&#x2F;&quot;&gt;is a new fixed cost, paid for with your
time&lt;&#x2F;a&gt;. If you use hard page loads, those things not only
work for free, they work forever, and they work in exactly the way the user expects and desires.&lt;&#x2F;p&gt;
&lt;aside&gt;
Hard page loads also reset the JavaScript environment every time, drastically reducing the surface
area for memory leaks.
&lt;&#x2F;aside&gt;
&lt;p&gt;At the time of this writing, the &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;showcase&quot;&gt;NextJS showcase&lt;&#x2F;a&gt; lists Nike&#x27;s
shopping platform as one of their successes. If you are literally Nike, and throwing millions at
making your shopping portal slightly more responsive could result in tens of millions of revenue, by
all means take a crack at it. I, personally, am dubious that the math typically pencils out, even
for Nike, but I concede that it&#x27;s at least plausible that you will deliver a networked experience
that is a hair quicker than what the default HTML can do, and reap the rewards.&lt;&#x2F;p&gt;
&lt;aside&gt;
Here I&#x27;m going to be annoying and note that the Nike website is kinda slow.
&lt;&#x2F;aside&gt;
&lt;p&gt;Meanwhile, the browser marches on, improving the UX of every website that uses basic HTML semantics.
For instance: browsers often &lt;em&gt;don&#x27;t&lt;&#x2F;em&gt; repaint full pages anymore. Try browsing
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_browser&quot;&gt;Wikipedia&lt;&#x2F;a&gt; (or &lt;a href=&quot;&#x2F;&quot;&gt;my blog&lt;&#x2F;a&gt;) on a decent internet
connection and notice how rarely the common elements flash (this feature is called &lt;a href=&quot;https:&#x2F;&#x2F;developer.chrome.com&#x2F;blog&#x2F;paint-holding&quot;&gt;&amp;quot;paint holding&amp;quot;&lt;&#x2F;a&gt;). And, if the connection isn&#x27;t fast, then the browser shows
a loading bar! It&#x27;s a win for users, and one of the many ways that sticking with the web primitives
rewards developers over time.&lt;&#x2F;p&gt;
&lt;p&gt;So if you&#x27;re a bank, or a government, or pretty much anyone with engineering resources short of
&amp;quot;limitless,&amp;quot; you will likely be better served by sticking to hard page loads (and the default HTML
capabilities) as much as possible. It&#x27;s dramatically easier to implement and benefits from browser
performance and security improvements over time. For page responsiveness improvements, try tweaking
your cache headers, scrutinizing the JavaScript you send to the client, and optimizing your CDN
setup. It always pays off in the long run.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-a-good-use-of-spas&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bonus-a-good-use-of-spas&quot; aria-label=&quot;Anchor link for: bonus-a-good-use-of-spas&quot;&gt;Bonus: A Good Use of SPAs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When I worked at the Washington Post, I worked on the interactive map that they used for live
election night coverage. &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;live&#x2F;czuu6s0gew4?si=Ch_Lp0YS1iBzyIYN&amp;amp;t=5628&quot;&gt;Watch my former boss, Jeremy Bowers, clicking around it the
livestream&lt;&#x2F;a&gt;. Here&#x27;s me and
&lt;a href=&quot;https:&#x2F;&#x2F;dylanfreedman.com&#x2F;&quot;&gt;Dylan Freedman&lt;&#x2F;a&gt;, in front of an early version:&lt;&#x2F;p&gt;
&lt;figure&gt;
  &lt;img src=&quot;&#x2F;blog&#x2F;hard-page-load&#x2F;alex-dylan-election-map.jpg&quot;
       width=500
       alt=&quot;Alex Petros and Dylan Freedman in front of a big screen with a gray map on it,
       at the Washington Post offices&quot;
       &gt;
  &lt;figcaption&gt;
    I had to leave this project after like 6 weeks and &lt;a href=&quot;https:&#x2F;&#x2F;www.brmayes.com&quot;&gt;Brittany&lt;&#x2F;a&gt;
    took my place. As you can see, it improved dramatically after I left.
  &lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;That&#x27;s a giant SvelteKit app! The map GUI is controlled by a &lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;docs&#x2F;svelte-store&quot;&gt;Svelte
store&lt;&#x2F;a&gt;, and, if I remember correctly, a websocket updates the
votes totals in the background. When you click on a US State, it shows a close-up of that
state and all the election info that had come in so far.&lt;&#x2F;p&gt;
&lt;p&gt;This is a great use of a reactive UI framework, because the data stored on the client doesn&#x27;t
update in response to user actions, it updates in response to new election results. The clicking
should be instantaneous, and the UI should live entirely on the client, because they can!&lt;&#x2F;p&gt;
&lt;p&gt;And it&#x27;s remarkable that you can compete with very expensive interactive map products using nothing
but a browser, open source libraries, and a couple months of engineer-time.&lt;&#x2F;p&gt;
&lt;p&gt;I had so much fun learning Svelte for this that I used to as the basis for
&lt;a href=&quot;https:&#x2F;&#x2F;areyoutheasshole.com&#x2F;&quot;&gt;AYTA&lt;&#x2F;a&gt;. If I were doing AYTA again though, I would definitely use
htmx.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.itsrainingmani.dev&#x2F;&quot;&gt;Mani Sundararajan&lt;&#x2F;a&gt; for his feedback on a draft of this
post; thanks to &lt;a href=&quot;https:&#x2F;&#x2F;denizaksimsek.com&#x2F;en&#x2F;&quot;&gt;Deniz Akşimşek&lt;&#x2F;a&gt; for digging up the paint holding blog.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;When &lt;em&gt;is&lt;&#x2F;em&gt; a good time to do partial page replacements? Either a) to add new information that would
be there after a refresh, because it reflects the current state of the resource, e.g. a
live-updating baseball score or b) as a result of actions that the user understands are ephemeral,
and wouldn&#x27;t expect to see after a refresh, like a dialog box.&lt;&#x2F;li&gt;
&lt;li&gt;I am generously assuming that the SPA psuedo-navigation actually does use &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; tags. For a while
that was not really incentivized by SPA frameworks, and people would just use &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt;s for
everything, but this has definitely gotten better lately.&lt;&#x2F;li&gt;
&lt;li&gt;Ironically, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexpetros&#x2F;triptych&quot;&gt;Triptych&lt;&#x2F;a&gt; has to simulate full-page
navigations with partial page replacements and the history API, exactly the same way that hx-boost
does, and is subject to the same inherent bugginess and lack of isolation. This is a limitation of
the tools available in userland, and a big reason why these proposals should be supported
natively, rather than in a library.&lt;&#x2F;li&gt;
&lt;li&gt;Earlier, I said that actions that do require a round-trip to server should just use one, but the
inverse applies as well: ideally, actions that do not required a round-trip to the server wouldn&#x27;t
use one. A good example of this is form validation. In the htmx world, sometimes &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;examples&#x2F;inline-validation&quot;&gt;returning a new
form with inline validation errors&lt;&#x2F;a&gt; is &amp;quot;good enough,&amp;quot;
(you always have to validate on the server, after all) but that experience can clearly be improved
by having the validation occur without a network request. I usually wouldn&#x27;t use an SPA just for
client-side validation, but we can acknowledge that they are better at it right now.&lt;&#x2F;li&gt;
&lt;li&gt;Further reading:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-response-to-rich-harris&#x2F;&quot;&gt;&amp;quot;A Response To &#x27;Have Single-Page Apps Ruined the Web?&#x27;&amp;quot;&lt;&#x2F;a&gt;, Carson Gross&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;infrequently.org&#x2F;2023&#x2F;02&#x2F;the-market-for-lemons&#x2F;&quot;&gt;&amp;quot;The Market For Lemons&amp;quot;&lt;&#x2F;a&gt;, Alex Russell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Life &amp; Death of htmx</title>
        <published>2024-06-13T00:00:00+00:00</published>
        <updated>2024-06-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/life-and-death-of-htmx/"/>
        <id>https://unplannedobsolescence.com/blog/life-and-death-of-htmx/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/life-and-death-of-htmx/">&lt;style&gt;
iframe {
  display: block;
  margin: 10px auto;
}
&lt;&#x2F;style&gt;
&lt;p&gt;This past weekend, I gave a talk entitled &amp;quot;The Life &amp;amp; Death of htmx&amp;quot; at &lt;a href=&quot;https:&#x2F;&#x2F;bigskydevcon.com&#x2F;&quot;&gt;Big Sky Dev Con&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;inRB6ull5WQ?si=rMeNsVv2jQkUcFO_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The thesis of the talk is that, with 30 years of real-world usage evidence, we have a clear
understanding of HTML&#x27;s limitations as hypertext, and with just three small additions to HTML, we
can address most of the use cases that the declarative AJAX libraries (&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;htmx&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;hotwired.dev&#x2F;&quot;&gt;turbo&#x2F;hotwire&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;unpoly.com&quot;&gt;unpoly&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;defunkt&#x2F;jquery-pjax&quot;&gt;pjax&lt;&#x2F;a&gt;, etc.) exist to resolve.&lt;&#x2F;p&gt;
&lt;p&gt;These three additions are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Support PUT, PATCH, and DELETE methods in forms&lt;&#x2F;li&gt;
&lt;li&gt;Allow buttons to make HTTP requests on their own, without being wrapped in forms&lt;&#x2F;li&gt;
&lt;li&gt;Add the &lt;code&gt;target&lt;&#x2F;code&gt; attribute to buttons, and allow the response from links, forms, and buttons to replace arbitrary DOM elements, using CSS selectors in the &lt;code&gt;target&lt;&#x2F;code&gt; attribute&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the talk, I explain the importance of each, and describe at a high level how each addition should
be integrated alongside the existing HTML controls.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t have formal proposals for these yet, but I&#x27;m working on them! I&#x27;ll update this space with
links when they are available, and if you have thoughts or help to offer, definitely &lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;about&#x2F;&quot;&gt;contact me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;post-script&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#post-script&quot; aria-label=&quot;Anchor link for: post-script&quot;&gt;Post Script&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I think the talk went pretty well, and don&#x27;t have too many of the &amp;quot;ah, I forgot to say that one
thing&amp;quot; regrets that inevitably hit the minute you walk off stage. But there are a couple themes that
I want to highlight, alongside the main argument, about why vanilla HTML is not just one way to make
a website, but the most important one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pure-html-is-the-past-and-future-of-essential-internet-infrastructure&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pure-html-is-the-past-and-future-of-essential-internet-infrastructure&quot; aria-label=&quot;Anchor link for: pure-html-is-the-past-and-future-of-essential-internet-infrastructure&quot;&gt;Pure HTML is the past and future of essential internet infrastructure&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Websites implemented in pure HTML are not only comically easy to maintain, but they largely adhere
to set of interface metaphors that all internet users understand. It&#x27;s remarkable how many people we
were able to teach concepts like page navigation and form submission. To the extent that your
website adds to these basic concepts, it shrinks the base of users who will feel comfortable
navigating it.&lt;&#x2F;p&gt;
&lt;p&gt;While many businesses require additional interface metaphors and don&#x27;t care if a septuagenarian pensioner with an HP notebook can navigate them, government services and other crucial web infrastructure need to be accessible to the largest group of people possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;accessibility-should-be-a-pit-of-success&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#accessibility-should-be-a-pit-of-success&quot; aria-label=&quot;Anchor link for: accessibility-should-be-a-pit-of-success&quot;&gt;Accessibility should be a pit of success&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The best way to get people to use interfaces that computers (and therefore screen readers,
alternative controls, and other assistive technologies) can understand is to make to the &amp;quot;right&amp;quot; elements capable of things that the &amp;quot;wrong&amp;quot; elements are not. If a button can make HTTP requests without JavaScript but a &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt; cannot, then a &lt;em&gt;lot&lt;&#x2F;em&gt; fewer people will use &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt;s where they should be using &lt;code&gt;&amp;lt;button&amp;gt;&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;Where possible, the most accessible way to build webpages should also be the easiest. If writing pure HTML is easy, expressive, and fun, then fewer people will turn to more complicated, less accessible solutions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;declarative-interfaces-are-more-maintainable&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#declarative-interfaces-are-more-maintainable&quot; aria-label=&quot;Anchor link for: declarative-interfaces-are-more-maintainable&quot;&gt;Declarative interfaces are more maintainable&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;...for as long as the interface remains relevant. The SQL queries that you wrote 10 years ago work well with modern web stacks, and new features can be integrated seamlessly alongside old ones; the SOAP APIs, maybe not so much.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps a better universal interface for the internet will come along soon, but it is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lindy_effect&quot;&gt;fairly good bet&lt;&#x2F;a&gt; that if 10 years from now you were handed a frontend codebase that hadn&#x27;t been touched since 2024, you would want that codebase to be as close to pure HTML as possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Best &quot;Hello World&quot; in Web Development</title>
        <published>2024-02-29T00:00:00+00:00</published>
        <updated>2024-02-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/best-hello-world-web-development/"/>
        <id>https://unplannedobsolescence.com/blog/best-hello-world-web-development/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/best-hello-world-web-development/">&lt;h2 id=&quot;the-classic-hello-world&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-classic-hello-world&quot; aria-label=&quot;Anchor link for: the-classic-hello-world&quot;&gt;The Classic Hello World&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s how you make a webpage that says &amp;quot;Hello World&amp;quot; in PHP:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;Hello World
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Name that file &lt;code&gt;index.php&lt;&#x2F;code&gt; and you&#x27;re set. Awesome. &lt;a href=&quot;.&#x2F;hello-world-v1.html&quot;&gt;Version 1&lt;&#x2F;a&gt; of our website looks like this:&lt;&#x2F;p&gt;
&lt;iframe title=&quot;Hello World Page&quot; width=300 height=200 src=&quot;.&#x2F;hello-world-v1.html&quot;&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;Okay, we can do a little better. Let&#x27;s add the HTML doctype and &lt;code&gt;&amp;lt;title&amp;gt;&lt;&#x2F;code&gt; element to make it a &lt;a href=&quot;http:&#x2F;&#x2F;lofi.limo&#x2F;blog&#x2F;write-html-right&quot;&gt;legal HTML5 page&lt;&#x2F;a&gt;, an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;&#x2F;code&gt; header to give the &amp;quot;Hello World&amp;quot; some heft, and a &lt;code&gt;&amp;lt;p&amp;gt;&lt;&#x2F;code&gt; paragraph to tell our visitor where they are.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello, World!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello, World!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Welcome to Alex&amp;#39;s website :)&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a complete webpage! If you host this single file at one of the many places available to host PHP code, it will show that webpage to everyone who visits your website. Here&#x27;s &lt;a href=&quot;.&#x2F;hello-world-v2.html&quot;&gt;Version 2&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;iframe title=&quot;Hello World Page&quot; width=300 height=200 src=&quot;.&#x2F;hello-world-v2.html&quot;&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;Now let&#x27;s make &lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;best-hello-world-web-development&#x2F;.&#x2F;hello-world-v3.html&quot;&gt;Version 3&lt;&#x2F;a&gt; comic sans! And baby blue! We just have to add a style tag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello, World!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  background-color: lightblue;
&lt;&#x2F;span&gt;&lt;span&gt;  font-family: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comic Sans MS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Comic Sans&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, cursive;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello, World!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Welcome to Alex&amp;#39;s website :)&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;iframe title=&quot;Hello World Page&quot; width=300 height=200 src=&quot;.&#x2F;hello-world-v3.html&quot;&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;Already our webpage has a little bit of personality, and we&#x27;ve spent just a couple minutes on it. At each step we could see the website in a browser, and keep adding to it. We haven&#x27;t even used any PHP yet—all this is plain old HTML, which is much easier to understand than PHP.&lt;&#x2F;p&gt;
&lt;p&gt;This is the best &amp;quot;Hello World&amp;quot; in web development, and possibly all of programming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contemporary-hello-worlds&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#contemporary-hello-worlds&quot; aria-label=&quot;Anchor link for: contemporary-hello-worlds&quot;&gt;Contemporary Hello Worlds&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The thing that first got me interested in PHP in the first place is a comment that Ruby on Rails creator &lt;a href=&quot;https:&#x2F;&#x2F;corecursive.com&#x2F;045-david-heinemeier-hansson-software-contrarian&#x2F;&quot;&gt;David Heinemeier Hansson made on the &amp;quot;CoRecursive&amp;quot; podcast&lt;&#x2F;a&gt;, about PHP&#x27;s influence on Rails:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] the other inspiration, which was from PHP, where you literally could do a one line thing that said, “Print hello world,” and it would show a web page. It would show Hello World on a web page. You just drop that file into the correct folder, and you were on the web [...] I think to this day still unsurpassed ease of Hello World.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;He&#x27;s right—this is an unsurpassed ease of Hello World. It is certainly not surpassed by Ruby on Rails, the &lt;a href=&quot;https:&#x2F;&#x2F;guides.rubyonrails.org&#x2F;getting_started.html&quot;&gt;&amp;quot;Getting Started&amp;quot; guide&lt;&#x2F;a&gt; for which not only requires installing ruby, SQLite, and Rails itself, but also has you run an initialization command (&lt;code&gt;rails new blog&lt;&#x2F;code&gt;) that creates a &lt;a href=&quot;https:&#x2F;&#x2F;guides.rubyonrails.org&#x2F;getting_started.html#creating-the-blog-application&quot;&gt;genuinely shocking number of files and directories&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rails new blog 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;$ tree -L 2 blog
&lt;&#x2F;span&gt;&lt;span&gt;blog
&lt;&#x2F;span&gt;&lt;span&gt;├── Dockerfile
&lt;&#x2F;span&gt;&lt;span&gt;├── Gemfile
&lt;&#x2F;span&gt;&lt;span&gt;├── Gemfile.lock
&lt;&#x2F;span&gt;&lt;span&gt;├── README.md
&lt;&#x2F;span&gt;&lt;span&gt;├── Rakefile
&lt;&#x2F;span&gt;&lt;span&gt;├── app
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── assets
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── channels
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── controllers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── helpers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── javascript
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── jobs
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── mailers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── models
&lt;&#x2F;span&gt;&lt;span&gt;│   └── views
&lt;&#x2F;span&gt;&lt;span&gt;├── bin
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── bundle
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── docker-entrypoint
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── importmap
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── rails
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── rake
&lt;&#x2F;span&gt;&lt;span&gt;│   └── setup
&lt;&#x2F;span&gt;&lt;span&gt;├── config
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── application.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── boot.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── cable.yml
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── credentials.yml.enc
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── database.yml
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── environment.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── environments
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── importmap.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── initializers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── locales
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── master.key
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── puma.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── routes.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   └── storage.yml
&lt;&#x2F;span&gt;&lt;span&gt;├── config.ru
&lt;&#x2F;span&gt;&lt;span&gt;├── db
&lt;&#x2F;span&gt;&lt;span&gt;│   └── seeds.rb
&lt;&#x2F;span&gt;&lt;span&gt;├── lib
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── assets
&lt;&#x2F;span&gt;&lt;span&gt;│   └── tasks
&lt;&#x2F;span&gt;&lt;span&gt;├── log
&lt;&#x2F;span&gt;&lt;span&gt;│   └── development.log
&lt;&#x2F;span&gt;&lt;span&gt;├── public
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── 404.html
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── 422.html
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── 500.html
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── apple-touch-icon-precomposed.png
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── apple-touch-icon.png
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── favicon.ico
&lt;&#x2F;span&gt;&lt;span&gt;│   └── robots.txt
&lt;&#x2F;span&gt;&lt;span&gt;├── storage
&lt;&#x2F;span&gt;&lt;span&gt;├── test
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── application_system_test_case.rb
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── channels
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── controllers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── fixtures
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── helpers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── integration
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── mailers
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── models
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── system
&lt;&#x2F;span&gt;&lt;span&gt;│   └── test_helper.rb
&lt;&#x2F;span&gt;&lt;span&gt;├── tmp
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── cache
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── local_secret.txt
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── pids
&lt;&#x2F;span&gt;&lt;span&gt;│   └── storage
&lt;&#x2F;span&gt;&lt;span&gt;└── vendor
&lt;&#x2F;span&gt;&lt;span&gt;    └── javascript
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;38 directories, 35 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, Rails is doing a lot of stuff for you! It&#x27;s setting up a unit test framework, a blog content folder, a database schema, whatever &lt;code&gt;credentials.yml.enc&lt;&#x2F;code&gt; is,  and so on. If I wanted all of that, then Rails might be the way to go. But right now I want to make a webpage that says &amp;quot;Hello World&amp;quot; and start adding content to it; I should not have to figure out what a &lt;code&gt;Gemfile&lt;&#x2F;code&gt; is to do that.&lt;&#x2F;p&gt;
&lt;p&gt;As a reminder, here&#x27;s the directory structure for our &amp;quot;Hello World&amp;quot; in PHP:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ tree -L 2 php-project
&lt;&#x2F;span&gt;&lt;span&gt;php-project
&lt;&#x2F;span&gt;&lt;span&gt;└── index.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1 directory, 1 file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My goal here isn&#x27;t to rip on Ruby on Rails—although, is a Dockerfile really necessary when you&#x27;re just &amp;quot;Getting Started&amp;quot;?—but to highlight a problem that is shared by basically every general-purpose programming language: using Ruby for web development requires a discomfiting amount of scaffolding.&lt;&#x2F;p&gt;
&lt;p&gt;Over in the Python ecosystem, one of the first web development frameworks you will encounter is &lt;a href=&quot;https:&#x2F;&#x2F;flask.palletsprojects.com&#x2F;en&#x2F;3.0.x&#x2F;quickstart&#x2F;&quot;&gt;flask&lt;&#x2F;a&gt;, which is a much lighter-weight framework than Rails. In flask, you can also get the &amp;quot;Hello World&amp;quot; down to one file, sort of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello_world&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even here, there are a ton of concepts to wrap your head around: you have to understand basic coding constructs like &amp;quot;functions&amp;quot; and &amp;quot;imports&amp;quot;, as well as Python&#x27;s syntax for describing these things; you have to figure out how to install Python, how to install Python packages like &lt;code&gt;flask&lt;&#x2F;code&gt;, and how to run Python environment management tool like &lt;code&gt;venv&lt;&#x2F;code&gt; (a truly bizarre kludge that Python developers insist isn&#x27;t that big of a deal but is absolutely insane if you come from any other modern programming environment); I know we said one file earlier, but if you want this work on a server you&#x27;re going to have to document that you installed flask, using a file like &lt;code&gt;requirements.txt&lt;&#x2F;code&gt;; when you start to add more content you&#x27;re going to have to figure out how to do multiline strings; and what&#x27;s going with the inscrutable &lt;code&gt;app = Flask(__name__)&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;If any of these concepts aren&#x27;t arranged properly—in your head and in your file—your server will display nothing.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, you don&#x27;t have to know a &lt;em&gt;thing&lt;&#x2F;em&gt; about PHP to start writing PHP code. Hell, you barely have to know the command line. If you can manage to install and run a PHP server this file will simply display in your browser.&lt;&#x2F;p&gt;
&lt;p&gt;And the file itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;Hello World
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You didn&#x27;t have to think about dependencies, or routing, or &lt;code&gt;import&lt;&#x2F;code&gt;, or language constructs, or any of that stuff. You&#x27;re just running PHP. And you&#x27;re on the web.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-importance-of-time-to-hello-world&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-importance-of-time-to-hello-world&quot; aria-label=&quot;Anchor link for: the-importance-of-time-to-hello-world&quot;&gt;The Importance of Time-To-Hello-World&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The Time-To-Hello-World test is about the time between when you have an idea and when you are able to see the seed of its expression. That time is crucial—it&#x27;s when your idea is in its most mortal state.&lt;&#x2F;p&gt;
&lt;p&gt;Years before my friend &lt;a href=&quot;https:&#x2F;&#x2F;wttdotm.com&#x2F;&quot;&gt;Morry&lt;&#x2F;a&gt; really knew how to code, he was able to kludge together enough PHP of make a website that tells you whether your IP address has 69 in it. It basically looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Does my IP address have 69 in it?&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Does my IP address have 69 in it?&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strpos&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_SERVER&lt;&#x2F;span&gt;&lt;span&gt;[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;REMOTE_ADDR&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;], &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;69&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) !== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Nice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Not Nice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may or may not find that to be a compelling work of art, but it would not exist if spinning up Flask boilerplate were a requirement to do it. And he had taken a CS course in basic Python; the experience of making a &lt;em&gt;website&lt;&#x2F;em&gt; in PHP was just that much better. This turned out to be the first in a long line of internet art projects, some of which &lt;a href=&quot;https:&#x2F;&#x2F;wemakeinter.net&#x2F;&quot;&gt;we made together&lt;&#x2F;a&gt; and some of which &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wttdotm?tab=repositories&quot;&gt;he did on his own&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doesmyipaddresshave69init.com&#x2F;&quot;&gt;doesmyipaddresshave69init.com&lt;&#x2F;a&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;wttdotm.com&#x2F;69suite.html&quot;&gt;a dumb idea&lt;&#x2F;a&gt; for a website. But sometimes dumb ideas evolve into good ideas, or they teach you something that&#x27;s later used to make a good idea, or they just make you chuckle. Or none of the above. The best thing about websites is that you don&#x27;t have to justify them to anyone—you can just make them. And PHP is still the fastest way to make a &lt;a href=&quot;https:&#x2F;&#x2F;blog.wesleyac.com&#x2F;posts&#x2F;no-static-websites&quot;&gt;&amp;quot;dynamic&amp;quot;&lt;&#x2F;a&gt; website.&lt;&#x2F;p&gt;
&lt;p&gt;I recently made a little &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexpetros&#x2F;invoice-generator&quot;&gt;invoice generator with a local browser interface&lt;&#x2F;a&gt; for my freelance business. It works great! It&#x27;s got a homepage with a list of my generated invoices, a &lt;code&gt;&#x2F;new.php&lt;&#x2F;code&gt; route for making a new one, and &lt;code&gt;&#x2F;invoices&#x2F;generated&#x2F;{invoice_id}&lt;&#x2F;code&gt; routes to view each invoice in a printable format.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t find the boilerplate required to make a &lt;a href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2016&#x2F;01&#x2F;18&#x2F;rescuing-rest.html&quot;&gt;RESTful web service&lt;&#x2F;a&gt; in NodeJS especially onerous—I have a pretty good system for it at this point. But PHP brings the time-to-hello-world down tremendously. I just don&#x27;t think this would have gotten off the ground if I had to setup ExpressJS, copy my router boilerplate, make 2 files for each route (the template and the javascript that serves it), and do all the other things I do to structure web-apps in Node. Instead, I got all that stuff built-in with vanilla PHP, and that will presumably work for as long as PHP does. I didn&#x27;t even have to touch &lt;a href=&quot;https:&#x2F;&#x2F;getcomposer.org&#x2F;&quot;&gt;the package manager&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of people have the attitude that writing vanilla code (and vanilla PHP especially) is never okay because you need secure-by-default frameworks to ensure that you don&#x27;t make any security mistakes. It clearly true that if you are building professional software you should be aware of &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;web-security-basics-with-htmx&quot;&gt;the web security model&lt;&#x2F;a&gt; and make informed decisions about the security model of your application; not everyone is building professional software.&lt;&#x2F;p&gt;
&lt;p&gt;Relatedly, one route to becoming is a software professional is to have a delightful experience as a software amateur.&lt;&#x2F;p&gt;
&lt;p&gt;I believe that more people should use the internet not just as consumers, but as creators (not of &lt;em&gt;content&lt;&#x2F;em&gt; but of &lt;em&gt;internet&lt;&#x2F;em&gt;). There is a lot of creativity on the web that can be unlocked by making web development more accessible to artists, enthusiasts, hobbyists, and non-web developers of all types. The softer the learning curve of getting online, the more people will build, share, play, and create there.&lt;&#x2F;p&gt;
&lt;p&gt;Softening the learning curve means making the common things easy and not introducing too many concepts until you hit the point where you need them. Beginners and experts alike benefit.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gnat&quot;&gt;Nathaniel Sabanski&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;&quot;&gt;Al Sweigart&lt;&#x2F;a&gt; for their feedback on a draft of this blog. I wrote this blog at &lt;a href=&quot;https:&#x2F;&#x2F;www.recurse.com&#x2F;scout&#x2F;click?t=044d120abf1c334d0b2a3132634eb025&quot;&gt;Recurse Center&lt;&#x2F;a&gt;, a terrific programming community that you should check out.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My example invoice generator is not meant to be put online, so it doesn&#x27;t escape text to prevent XSS attacks, or do the other &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;web-security-basics-with-htmx&quot;&gt;web security basics&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Admittedly, some of PHP&#x27;s design decisions really lend themselves to insecure code. For starters, they really need &lt;a href=&quot;https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;language.basic-syntax.phptags.php&quot;&gt;a short echo tag&lt;&#x2F;a&gt; that auto-escapes.&lt;&#x2F;li&gt;
&lt;li&gt;At this time, I don&#x27;t think I&#x27;m going to start defaulting to PHP for client work. I&#x27;m very comfortable in JS for general-purpose dynamic programming, and JS has a bunch of other useful web built-ins that PHP does not.&lt;&#x2F;li&gt;
&lt;li&gt;I am definitely going to do more web art in PHP, though. I especially like how compact and shareable it can be, which has tremendous value for certain types of code.&lt;&#x2F;li&gt;
&lt;li&gt;PHP is also missing a bunch of stuff I consider really important to writing RESTFUL web services, that makes pre-processing your requests close to mandatory. Big ones for me include &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;Provider&#x2F;Style&#x2F;URI&quot;&gt;removing the &lt;code&gt;.php&lt;&#x2F;code&gt; file extension&lt;&#x2F;a&gt; from the URL, and PUT&#x2F;DELETE support.&lt;&#x2F;li&gt;
&lt;li&gt;Yes, I&#x27;m aware of well-known opinion-haver David Heinemeier Hansson&#x27;s other opinions. Some of them are right and some of them are wrong.&lt;&#x2F;li&gt;
&lt;li&gt;More languages should have a &amp;quot;thing&amp;quot; that they are &amp;quot;for.&amp;quot; Maybe I&#x27;ll write about how awk rekindled my love for programming next.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Custom HTML Has Levels To It</title>
        <published>2023-12-31T00:00:00+00:00</published>
        <updated>2023-12-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/custom-html-has-levels/"/>
        <id>https://unplannedobsolescence.com/blog/custom-html-has-levels/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/custom-html-has-levels/">&lt;p&gt;The comment I received most frequently on &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;behavior-belongs-in-html&#x2F;&quot;&gt;Behavior Belongs in the HTML&lt;&#x2F;a&gt;&amp;quot; was: &amp;quot;don&#x27;t Web Components solve this?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Web Components aren&#x27;t an interface. They are... well, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WICG&#x2F;webcomponents&#x2F;blob&#x2F;1b75f7516e9901c26f1eb639d929aa82402c2fe0&#x2F;README.md&quot;&gt;a lot of things&lt;&#x2F;a&gt;, including: &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_components&#x2F;Using_shadow_DOM&quot;&gt;the Shadow DOM&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;template&quot;&gt;HTML templates&lt;&#x2F;a&gt;, and a bunch of JavaScript APIs. But if what you mean is &amp;quot;custom elements,&amp;quot; then the answer is no. If you want to customize the behavior of an element, you shouldn&#x27;t have to wrap it in a new one.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate, I&#x27;m going to use the example that Chris Ferdinandi arrives at in &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;gomakethings.com&#x2F;html-web-components&#x2F;&quot;&gt;HTML Web Components&lt;&#x2F;a&gt;.&amp;quot; He uses Web Components to make a form that, when it&#x27;s submitted, replaces the &lt;code&gt;#item-list&lt;&#x2F;code&gt; element with the response body, instead of navigating to a new page:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ajax-form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#item-list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;subscribe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Subscribe&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ajax-form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is great! Its declarative interface is easy to understand, and the form will work in the old, standard way if JavaScript is turned off (a concept called &amp;quot;progressive enhancement&amp;quot;). There&#x27;s just one problem with it: that wrapper element, &lt;code&gt;&amp;lt;ajax-form&amp;gt;&lt;&#x2F;code&gt;, is totally superfluous.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;subscribe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#item-list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Subscribe&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my version, I removed &lt;code&gt;&amp;lt;ajax-form&amp;gt;&lt;&#x2F;code&gt; and put the &lt;code&gt;target&lt;&#x2F;code&gt; attribute on the form itself. It has the same functionality and same fallback capability, but without any nesting (you&#x27;d want to use a slightly different name than &amp;quot;target,&amp;quot; but more on that later).&lt;&#x2F;p&gt;
&lt;!-- (I&#x27;m aware that Ferdinandi is demonstrating how to use Web Components using their existing interface; I&#x27;m aware that Web Components have useful JavaScript APIs that custom attributes do not; I&#x27;m making a point about how HTML should support an easier way to accomplish the same task) --&gt;
&lt;p&gt;If all you need to do is augment the functionality of a single DOM node, custom attributes are a better interface for it, for a couple reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A flatter document is easier to read&lt;&#x2F;strong&gt; - I&#x27;m not saying you have to write all your HTML &lt;a href=&quot;http:&#x2F;&#x2F;lofi.limo&#x2F;blog&#x2F;write-html-right&quot;&gt;like this guy&lt;&#x2F;a&gt;, but to the extent that you can flatten your document without loss of structure, you should.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Surrounding with tags is a hassle&lt;&#x2F;strong&gt; - Yes, even with a good text editor, adding, editing and removing surrounding tags is annoying, compared to editing an attribute.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;It&#x27;s closer to the default semantics&lt;&#x2F;strong&gt; - The markup (and DOM tree!) reflects that I&#x27;m slightly changing how the form works, not nesting the form inside a different form.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Attributes are a demonstrably superior interface for customizing HTML elements—which is why when WHATWG adds behavior to existing elements, it does so by adding new attributes, not new tags to wrap them with. Using tag wrappers to alter the behavior of existing elements is a kludge, required only because HTML doesn&#x27;t properly support custom attributes. As Ferdinandi himself says: &amp;quot;what I love about Web Components is that you can easily customize behavior with custom attributes.&amp;quot; You shouldn&#x27;t need Web Components for that.&lt;&#x2F;p&gt;
&lt;p&gt;Incidentally, &lt;code&gt;target&lt;&#x2F;code&gt; in the above example is identical to &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;attributes&#x2F;hx-target&#x2F;&quot;&gt;htmx&#x27;s &lt;code&gt;hx-target&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; attribute, which also goes directly on the form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hx-post&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;subscribe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#item-list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Subscribe&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my time as an htmx maintainer, no one has ever asked &amp;quot;why can&#x27;t I wrap the form with a new element instead?&amp;quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-attributes-fill-the-semantic-deviation-gap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#custom-attributes-fill-the-semantic-deviation-gap&quot; aria-label=&quot;Anchor link for: custom-attributes-fill-the-semantic-deviation-gap&quot;&gt;Custom attributes fill the semantic deviation gap&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My theory of custom attributes is that they are missing link between standard HTML and custom (web) components. They allow library authors to increase the capabilities of HTML, but in exchange for limiting those extensions to existing HTML elements, they get to borrow most of the existing elements&#x27; semantic power.&lt;&#x2F;p&gt;
&lt;p&gt;I think of it in levels, where each number represents a jump in the amount you are deviating from HTML&#x27;s default semantics:&lt;&#x2F;p&gt;
&lt;ol start=0&gt;
&lt;li&gt;Using standard HTML
&lt;li&gt;Using standard HTML elements with custom behavior
&lt;li&gt;Using custom HTML elements
&lt;li&gt;Using elements of some other framework that compiles down to HTML
&lt;&#x2F;ol&gt;
&lt;p&gt;Ideally, you want to deviate as little as possible, because each successive level of semantic deviation represents a responsibility that you have inherited from the browser:&lt;&#x2F;p&gt;
&lt;ol start=0&gt;
&lt;li&gt;The browser understands everything
&lt;li&gt;The browser knows what this element is, but not how it works
&lt;li&gt;The browser knows neither what this element is nor how it works
&lt;li&gt;All of the above, only now it&#x27;s the framework&#x27;s responsibility, not yours
&lt;&#x2F;ol&gt;
&lt;p&gt;So when you add a custom attribute to a form to change its behavior, your browser no longer controls that element&#x27;s functionality, but &lt;em&gt;it still knows that it&#x27;s a form&lt;&#x2F;em&gt;. That means you get all the built-in browser form features with no additional work, including autocomplete, screen reader functionality, and predictable refresh behavior—much better than if just made your own form-like component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;these-features-go-to-level-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#these-features-go-to-level-2&quot; aria-label=&quot;Anchor link for: these-features-go-to-level-2&quot;&gt;These features go to Level 2&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you really do need to go to Deviation Level 2, and create not just new behavior but a new &lt;em&gt;thing&lt;&#x2F;em&gt;. Here&#x27;s an example I adapted from Eric Meyer&#x27;s &amp;quot;&lt;a href=&quot;https:&#x2F;&#x2F;meyerweb.com&#x2F;eric&#x2F;thoughts&#x2F;2023&#x2F;11&#x2F;01&#x2F;blinded-by-the-light-dom&#x2F;&quot;&gt;Blinded by the Light DOM&lt;&#x2F;a&gt;,&amp;quot; which I&#x27;m embedding directly inside my page because making your own web site is cool and I get to do that:&lt;&#x2F;p&gt;
&lt;font-slider unit=em target=&quot;.preview span&quot;&gt;
  &lt;label for=title-size&gt;Title Font Size&lt;&#x2F;label&gt;
  &lt;input id=title-size type=range min=0.5 max=4 step=0.1 value=2&gt;
&lt;&#x2F;font-slider&gt;
&lt;div class=preview&gt;
  &lt;span&gt;Unplanned Obsolescence&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is a &lt;code&gt;&amp;lt;font-slider&amp;gt;&lt;&#x2F;code&gt;. It&#x27;s a custom element that combines a &lt;code&gt;&amp;lt;label&amp;gt;&lt;&#x2F;code&gt; and a &lt;code&gt;&amp;lt;input type=range&amp;gt;&lt;&#x2F;code&gt; to make entirely new thing: a reset-able slider that controls font size. Take a moment to read the HTML interface for it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;I&amp;#39;m deliberately not including any of the CSS or JS, because this blog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;is about HTML interfaces. See the link above or View Source for the rest.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;--&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font-slider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;em &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.preview span&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title-size&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Title font size&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font-slider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Unplanned Obsolescence&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &amp;quot;&lt;a href=&quot;http:&#x2F;&#x2F;127.0.0.1:1111&#x2F;blog&#x2F;behavior-belongs-in-html&#x2F;#enhancing-the-semantics&quot;&gt;Behavior Belongs in the HTML&lt;&#x2F;a&gt;,&amp;quot; I emphasized how the attribute controls (&lt;code&gt;unit&lt;&#x2F;code&gt;, &lt;code&gt;target&lt;&#x2F;code&gt;, &lt;code&gt;max&lt;&#x2F;code&gt;) are easy to edit even if you don&#x27;t know how they&#x27;re implemented. Still true! But this time I want you to think about what the existence of &lt;code&gt;&amp;lt;font-slider&amp;gt;&lt;&#x2F;code&gt; adds to this markup. What new &lt;em&gt;meaning&lt;&#x2F;em&gt; it creates. What the HTML is &lt;em&gt;saying&lt;&#x2F;em&gt; to you.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s saying that the label and the input function together as a &amp;quot;font slider&amp;quot;—in which the value of the input will be used for the CSS on the page. That&#x27;s entirely different from what they mean when they&#x27;re together inside a &lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt; tag, where the value of that input will be used as a parameter in a network request.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- This is just a labeled slider; it could control anything --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random-range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Some slider&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random-range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- This is a form slider; its value will be submitted to a server --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;form-range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Input value&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;form-range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- This is a font slider; its value sets font sizes on the page --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font-slider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;font-range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Font size&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;font-range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font-slider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The difference between &lt;code&gt;&amp;lt;font-slider&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;ajax-form&amp;gt;&lt;&#x2F;code&gt; is that the former establishes a new meaning for its subtree (this labeled input changes the font) and the latter retains the overall meaning of its subtree (the form still makes an HTTP request and displays the response to the user) while slightly modifying its behavior (this form will will display its response in the current page instead of a new one).&lt;&#x2F;p&gt;
&lt;p&gt;You can quibble about what degree of modification constitutes &amp;quot;new meaning&amp;quot;—that&#x27;s language for ya—but what matters is that there real tradeoffs at each deviation level. Library authors who only want to enhance existing elements (whatever that means to them) see this, and—correctly—decide that their library will be easier to use if it is based in custom attributes rather than Web Components.&lt;&#x2F;p&gt;
&lt;p&gt;Adding a new element is still more difficult than adding a new attribute, but in exchange for the extra syntax, we get increased power that suits the complexity of the task.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fence-the-cowpaths&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fence-the-cowpaths&quot; aria-label=&quot;Anchor link for: fence-the-cowpaths&quot;&gt;Fence the cowpaths&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are good reasons for using all of these levels, but only Deviation Level 1 lacks the appropriate support in legal HTML (&lt;code&gt;data-&lt;&#x2F;code&gt; attributes are insufficient, for reasons described by &lt;a href=&quot;https:&#x2F;&#x2F;unplannedobsolescence.com&#x2F;blog&#x2F;behavior-belongs-in-html&#x2F;#back-to-reality&quot;&gt;me here&lt;&#x2F;a&gt; and better &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatwg&#x2F;html&#x2F;issues&#x2F;2271#issuecomment-744188324&quot;&gt;Joshua Wise here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;When you talk about the need for better interfaces, you always get some comment along the lines of &amp;quot;well the thing you&#x27;re describing isn&#x27;t really that bad and people can just do it this other way.&amp;quot; That might be true. But if it&#x27;s worse than the alternative, people will use the alternative.&lt;&#x2F;p&gt;
&lt;p&gt;A significant chunk of the web development community lives happily at Deviation Level 4; they understand HTML not as an authorship language, but as a compile target, and interact with HTML semantics only insofar as they are relevant for understanding the behavior of React, or Svelte, or LiveView. Staying in framework-land offers real ergonomic benefits for writing HTML-like markup, in addition to the actual reactive functionality that people ostensibly use the frameworks for.&lt;&#x2F;p&gt;
&lt;!-- (I will leave it to future blogs posts to convince you that there are many cases where writing plain HTML matters ([but here&#x27;s a hint](https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;no-build-step&#x2F;)). --&gt;
&lt;p&gt;If you think writing HTML directly should be encouraged (an argument for a future blog post), then it&#x27;s important that HTML&#x27;s ergonomics keep up with that of its competitors, where backwards compatibility and good sense permit.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, there&#x27;s an extremely easy way to do this: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatwg&#x2F;html&#x2F;issues&#x2F;2271&quot;&gt;save kebab-case attributes for custom behavior&lt;&#x2F;a&gt;. This has excellent symmetry with kebab-case &lt;em&gt;elements&lt;&#x2F;em&gt;  already being reserved for users; instantly blesses multiple, significant JS libraries with valid markup; and encourages a field of HTML innovation whose utility is so self-evident that it has managed to develop in spite of official discouragement. As the OP, &lt;a href=&quot;https:&#x2F;&#x2F;lea.verou.me&#x2F;&quot;&gt;Lea Verou&lt;&#x2F;a&gt;, wrote in 2017:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more commonplace invalid HTML becomes, the less authors care about authoring valid HTML. Validation becomes pointless in their eyes if they see tons of perfectly good use cases being invalid.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I won&#x27;t rehash the debate on that WHATWG issue here, but I want to emphasize one point in particular: making custom kebab-case attributes legal is something that can and should be decided on its own merits, independent of what JavaScript interface you build to interact with it. Verou recently put forward &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WICG&#x2F;webcomponents&#x2F;issues&#x2F;1029&quot;&gt;a proposal&lt;&#x2F;a&gt; for an &lt;code&gt;Attribute&lt;&#x2F;code&gt; class that makes use of a lot of the same ideas as Web Components. That looks great—and hard. Hard to get right, hard to get consensus on, hard to get Google or Apple to commit to building. Reserving just the names, however, is a much smaller problem space, and can be done without convincing a billion-dollar company that it&#x27;s worth their time.&lt;&#x2F;p&gt;
&lt;p&gt;The best time to make &lt;code&gt;ng-*&lt;&#x2F;code&gt;, &lt;code&gt;x-*&lt;&#x2F;code&gt; and &lt;code&gt;hx-*&lt;&#x2F;code&gt; legal HTML was in 2017. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatwg&#x2F;html&#x2F;issues&#x2F;2271#issuecomment-1863139169&quot;&gt;The second best time is now&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;unmodernweb.com&#x2F;&quot;&gt;Katrina Scialdone&lt;&#x2F;a&gt; for reading a draft of this blog&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Copying Eric Meyer&#x27;s &lt;code&gt;&amp;lt;super-slider&amp;gt;&lt;&#x2F;code&gt; (I changed it to &lt;code&gt;&amp;lt;font-slider&amp;gt;&lt;&#x2F;code&gt; to make the semantic point a little better) was eye-openingly easy. I just dumped the &lt;code&gt;&amp;lt;style&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt; tags from JS Fiddle he embedded and it worked perfectly. That&#x27;s the future—we&#x27;re just working on the interface.&lt;&#x2F;li&gt;
&lt;li&gt;Web Components aren&#x27;t an interface—&lt;a href=&quot;https:&#x2F;&#x2F;daverupert.com&#x2F;2023&#x2F;07&#x2F;why-not-webcomponents&#x2F;&quot;&gt;not one for users anyway&lt;&#x2F;a&gt;—but if you want to see what a good declarative interface for Web Components might look like, check out Katrina&#x27;s in-progress &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kgscialdone&#x2F;facet&quot;&gt;Facet library&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Supposedly, Web Components are in use &lt;a href=&quot;https:&#x2F;&#x2F;web-highlights.com&#x2F;blog&#x2F;are-web-components-dead&#x2F;&quot;&gt;all over the place&lt;&#x2F;a&gt; (probably because they&#x27;re so reliable to re-use and embed), but &amp;quot;writing custom HTML elements&amp;quot; is what &amp;quot;Web Components&amp;quot; sounds like it should mean, and I expect that&#x27;s what a lot of people are thinking about when they ask why Web Components haven&#x27;t taken off.&lt;&#x2F;li&gt;
&lt;li&gt;At the risk of wading into the weird holy war around htmx... it&#x27;s ironic that the libraries most committed to hypermedia—in both &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;how-did-rest-come-to-mean-the-opposite-of-rest&#x2F;&quot;&gt;philosophy&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;a-response-to-rich-harris&#x2F;&quot;&gt;practice&lt;&#x2F;a&gt;—are the only ones writing invalid HTML. And it&#x27;s completely unnecessary.&lt;&#x2F;li&gt;
&lt;li&gt;Happy New Year!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;!--
Everything after this point is adapted from Eric Meyer&#x27;s blog post.
Read it here: https:&#x2F;&#x2F;meyerweb.com&#x2F;eric&#x2F;thoughts&#x2F;2023&#x2F;11&#x2F;01&#x2F;blinded-by-the-light-dom&#x2F;
--&gt;
&lt;style&gt;
.preview {
  border: 1px solid;
  padding: 1em;
  background: #eee;
}
.preview span {
  font-weight: bold;
  font-size: 2em;
  margin: 0;
}
font-slider {
  display: flex;
  align-items: center;
  margin-block: 1em;
}
font-slider input[type=&quot;range&quot;] {
  margin-inline: 0.25em 1px;
}
font-slider .readout {
  width: 3em;
  margin-inline: 0.25em;
  padding-inline: 0.5em;
  border: 1px solid #0003;
  background: #EEE;
  font: 1em monospace;
  text-align: center;
}

&lt;&#x2F;style&gt;
&lt;script&gt;
class fontSlider extends HTMLElement {
  connectedCallback() {
    let targets = document.querySelectorAll(this.getAttribute(&quot;target&quot;));
    let unit = this.getAttribute(&quot;unit&quot;);

    let slider = this.querySelector(&#x27;input[type=&quot;range&quot;]&#x27;);
    for (const targetEl of targets) {
      slider.addEventListener(&quot;input&quot;, (e) =&gt; {
        targetEl.style.setProperty(&quot;font-size&quot;, slider.value + unit);
        readout.textContent = slider.value + unit;
      });
    }

    let reset = slider.getAttribute(&quot;value&quot;);
    let resetter = document.createElement(&quot;button&quot;);
    resetter.textContent = &quot;↺&quot;;
    resetter.setAttribute(&quot;title&quot;, reset + unit);
    resetter.addEventListener(&quot;click&quot;, (e) =&gt; {
      slider.value = reset;
      slider.dispatchEvent(
        new MouseEvent(&quot;input&quot;, { view: window, bubbles: false })
      );
    });
    slider.after(resetter);

    let label = this.querySelector(&quot;label&quot;);
    let readout = document.createElement(&quot;span&quot;);
    readout.classList.add(&quot;readout&quot;);
    readout.textContent = slider.value + unit;
    label.after(readout);

    if (!label.getAttribute(&quot;for&quot;) &amp;&amp; slider.getAttribute(&quot;id&quot;)) {
      label.setAttribute(&quot;for&quot;, slider.getAttribute(&quot;id&quot;));
    }
    if (label.getAttribute(&quot;for&quot;) &amp;&amp; !slider.getAttribute(&quot;id&quot;)) {
      slider.setAttribute(&quot;id&quot;, label.getAttribute(&quot;for&quot;));
    }
    if (!label.getAttribute(&quot;for&quot;) &amp;&amp; !slider.getAttribute(&quot;id&quot;)) {
      let connector = label.textContent.replace(&quot; &quot;, &quot;_&quot;);
      label.setAttribute(&quot;for&quot;, connector);
      slider.setAttribute(&quot;id&quot;, connector);
    }
  }
}

customElements.define(&quot;font-slider&quot;, fontSlider);
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Behavior Belongs in the HTML</title>
        <published>2023-12-11T00:00:00+00:00</published>
        <updated>2023-12-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Alexander Petros
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://unplannedobsolescence.com/blog/behavior-belongs-in-html/"/>
        <id>https://unplannedobsolescence.com/blog/behavior-belongs-in-html/</id>
        
        <content type="html" xml:base="https://unplannedobsolescence.com/blog/behavior-belongs-in-html/">&lt;p&gt;When you click the button below, it&#x27;s going to show you a little message.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;button onclick=&quot;alert(&#x27;I was clicked!&#x27;)&quot;&gt;Click me&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Showing a pop-up when the user clicks a button isn&#x27;t something the button supports on its own; you
have to code it. There are two ways to attach custom functionality to an HTML element: inline, or
using an event listener.&lt;&#x2F;p&gt;
&lt;p&gt;This is how you&#x27;d do it with an inline handler:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I was clicked!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)&amp;quot;&amp;gt;Click me&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this is how you&#x27;d do it with an event listener:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Click me&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;btn &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I was clicked!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;ve never thought about this before, your likely reaction is that the first example (inline)
seems better. It takes up way less space and puts all the relevant information right on the button.
Not so, according to the experts. The MDN Web Docs have this to say about
&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;JavaScript&#x2F;Building_blocks&#x2F;Events#inline_event_handlers_%E2%80%94_dont_use_these&quot;&gt;using inline event handlers&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find HTML attribute equivalents for many of the event handler properties; however, you
shouldn&#x27;t use these — they are considered bad practice. It might seem easy to use an event
handler attribute if you are doing something really quick, but they quickly become unmanageable
and inefficient.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Or, in case that wasn&#x27;t clear enough:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You should never use the HTML event handler attributes&lt;&#x2F;strong&gt; — those are outdated, and using them is bad
practice. (emphasis theirs)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is, in my polite opinion, completely wrong. The novices are right on this one. MDN is a
tremendous resource, and I understand why they recommend the second form, but combating this
particular ideology is essential to rehabilitating HTML&#x27;s full functionality, and building durable
applications with it. I&#x27;ll explain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;form-and-function&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#form-and-function&quot; aria-label=&quot;Anchor link for: form-and-function&quot;&gt;&amp;lt;form&amp;gt; and function&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MDN does not want you to use inline event handlers because they don&#x27;t want you to mix form (HTML)
and function (JS). This is a programming principle called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Separation_of_concerns#HTML,_CSS,_JavaScript&quot;&gt;Separation of
Concerns&lt;&#x2F;a&gt; and the
HTML&#x2F;CSS&#x2F;JS split is a textbook example of it. From Wikipedia (at the time of this writing):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML is mainly used for organization of webpage content, CSS is used for definition of
content presentation style, and JS defines how the content interacts and behaves with the user.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Separation of Concerns is a great principle, but I think they drew the line in the wrong place. In
this conception of the web page, HTML is essentially the scaffolding that you dress up with CSS (for
style) and JS (for interactivity). But HTML is inherently interactive, too. It&#x27;s sufficiently
interactive to power billion-dollar businesses without a single line of JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say you want to set up a text box and a search button so that people can search the web.
You&#x27;d start with an &lt;code&gt;&amp;lt;input type=text&amp;gt;&lt;&#x2F;code&gt; for the text box, and a &lt;code&gt;&amp;lt;button&amp;gt;&lt;&#x2F;code&gt; to search.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Search&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On the page it looks like this:&lt;&#x2F;p&gt;
&lt;div&gt;
  &lt;input type=text&gt;
  &lt;button&gt;Search&lt;&#x2F;button&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;That button doesn&#x27;t do anything; the text goes nowhere. But if you replace the &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt; with a
&lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt;, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;search &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Search&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then clicking the button submits your input as a query, and navigates to the result. So if you&#x27;re on
&lt;code&gt;http:&#x2F;&#x2F;example.com&lt;&#x2F;code&gt; and the text box has &lt;code&gt;cats&lt;&#x2F;code&gt; in it, clicking submit will navigate you to
&lt;code&gt;http:&#x2F;&#x2F;example.com&#x2F;search?q=cats&lt;&#x2F;code&gt;. The Google homepage &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20040426014304&#x2F;http:&#x2F;&#x2F;www.google.com&#x2F;&quot;&gt;worked exactly like
this&lt;&#x2F;a&gt; for a very long time.&lt;&#x2F;p&gt;
&lt;p&gt;HTML defined that functionality in its entirety. The page does something interactive—it makes a
network request using your input, when you click the button—and no JavaScript was involved. It&#x27;s
easy to read, semantic, and will work in every web browser forever. Most importantly, it
demonstrates that the entire concept of &amp;quot;HTML defines the layout, JS defines the functionality&amp;quot; is
definitionally incorrect.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enhancing-the-semantics&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#enhancing-the-semantics&quot; aria-label=&quot;Anchor link for: enhancing-the-semantics&quot;&gt;Enhancing the semantics&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The problem with doing everything this way is that the functionality of HTML is extraordinarily
limited, and to augment that functionality we need JavaScript. Form validation is a great example.&lt;&#x2F;p&gt;
&lt;p&gt;This form is a lot like the previous one, only now it asks for an email address of at least 8
characters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;required minlength&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Submit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That will get the job done, sort of. It will keep the user from submitting something that is too
short, or doesn&#x27;t look like an email, but it won&#x27;t let you customize how the user is informed about
the requirements of the email address. This form, adapted for clarity from the MDN page on &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Forms&#x2F;Form_validation#validating_forms_using_javascript&quot;&gt;form
validation&lt;&#x2F;a&gt;,
demonstrates how to do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;novalidate&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;required minlength&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;aria-live&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;polite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Submit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now there is a &lt;code&gt;&amp;lt;span&amp;gt;&lt;&#x2F;code&gt; that starts off empty, but will be populated with an error message if the
email is invalid. There&#x27;s also a &lt;code&gt;novalidate&lt;&#x2F;code&gt; attribute on the form that tells the browser not to do
HTML&#x27;s built-in validation because we&#x27;re going to do it all ourselves in JavaScript. And here is the
JavaScript that decides what the message is going to be, and adds it to the span.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#mail + span.error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.className = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;showError&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;submit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valid&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;showError&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;preventDefault&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;showError&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueMissing&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You need to enter an email address.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeMismatch&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Entered value needs to be an email address.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tooShort&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textContent &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Email should be at least ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;} characters; you entered ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.value.length}.&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emailError&lt;&#x2F;span&gt;&lt;span&gt;.className = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error active&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That code enhances the HTML so that it does the following things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the user submits an invalid email, show them an error message&lt;&#x2F;li&gt;
&lt;li&gt;If the email was empty, show &amp;quot;You need to enter an email address.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;If the email was too short, show &amp;quot;Email should be at least 8 characters; you entered X&amp;quot; (where X
is the number of characters they entered)&lt;&#x2F;li&gt;
&lt;li&gt;If the email was not an email, show &amp;quot;Entered value needs to be an email address.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;When the user starts typing, remove the error message&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All those things aren&#x27;t built into HTML, which is why you have to write them in JavaScript. A lot of
JavaScript. But what if they were? Hypothetically, you could design the following interface in the
HTML itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;required
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;minlength&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;message-target&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#email-error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value-missing-message&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You need to enter an email address.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type-mismatch-message&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Entered value needs to be an email address.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;too-short-message&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Email should be at least ${email.minLength} characters; you entered ${email.value.length}.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;email-error&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Submit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of adding new messages in JavaScript, you write them on the input itself. That&#x27;s better, for
a couple reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The code is legible. Where is the &amp;quot;input too short&amp;quot; message defined? In &lt;code&gt;too-short-messsage&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;essays&#x2F;locality-of-behaviour&#x2F;&quot;&gt;behavior is local&lt;&#x2F;a&gt;. It&#x27;s impossible &lt;em&gt;not&lt;&#x2F;em&gt; to
see that someone changed the message, and where they did it.&lt;&#x2F;li&gt;
&lt;li&gt;The logic can be trivially re-used on different inputs&lt;&#x2F;li&gt;
&lt;li&gt;The interface automatically implements the &lt;a href=&quot;https:&#x2F;&#x2F;w3c.github.io&#x2F;aria&#x2F;#aria-live&quot;&gt;aria-live&lt;&#x2F;a&gt;
designation that is appropriate for a validation message (in this case, &lt;code&gt;polite&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In some sense these are all the same advantage: they give HTML richer semantics.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully you&#x27;re howling at your computer screen about this. &amp;quot;You didn&#x27;t solve anything! Doing
validation is complex and you just magic wanded it away by designing a perfect interface for it.&amp;quot;
Yes. Exactly. That is what interfaces are supposed to do. Better semantics make it possible for the
programmer to describe what the element does, and for someone else to take care of the details for
them.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not saying you&#x27;re not going to have to write JavaScript—&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=co4EsnwAM1Q&amp;amp;t=110s&quot;&gt;someone&#x27;s got to write
JavaScript&lt;&#x2F;a&gt;—but if we start writing our
JavaScript libraries to enrich HTML&#x27;s semantics, rather than replace them, we might get a lot more
mileage out of both.&lt;&#x2F;p&gt;
&lt;p&gt;Keep in mind that, at this stage, the custom semantics I&#x27;m using are still purely theoretical.
We&#x27;ll talk about forwards compatibility, &lt;code&gt;data-&lt;&#x2F;code&gt; attributes, and all the hard details in a moment.
The first task is to acknowledge that HTML, as a &lt;em&gt;hyper&lt;&#x2F;em&gt;text markup language, is inherently
functional: the &amp;quot;hyper&amp;quot; denotes all the extra functionality, like links and forms, that we add to
the text. You need to &lt;a href=&quot;https:&#x2F;&#x2F;intercoolerjs.org&#x2F;2020&#x2F;01&#x2F;14&#x2F;taking-html-seriously&quot;&gt;take HTML
seriously&lt;&#x2F;a&gt; to build good interfaces for
it.&lt;&#x2F;p&gt;
&lt;p&gt;Once we do that, the task ahead is to figure out how best to augment its limited semantics with our
own. That part is hard.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-reality&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-to-reality&quot; aria-label=&quot;Anchor link for: back-to-reality&quot;&gt;Back to reality&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, so if we want to enrich HTML&#x27;s semantics, what are the right ways to do it?&lt;&#x2F;p&gt;
&lt;p&gt;The main concern here is that as HTML is both a living standard and a mercilessly backwards
compatible one (it&#x27;s a remarkable accomplishment that &lt;a href=&quot;http:&#x2F;&#x2F;info.cern.ch&#x2F;hypertext&#x2F;WWW&#x2F;TheProject.html&quot;&gt;the first website
ever&lt;&#x2F;a&gt; is still online and displays perfectly on
modern web browsers). So if I add &lt;code&gt;too-short-messsage&lt;&#x2F;code&gt; to my input element, and then a couple years
in the future &lt;a href=&quot;https:&#x2F;&#x2F;whatwg.org&#x2F;&quot;&gt;WHATWG&lt;&#x2F;a&gt; adds a new &lt;code&gt;too-short-messsage&lt;&#x2F;code&gt; attribute, the page will
start to break in unexpected ways.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microformats.org&#x2F;&quot;&gt;Microformats&lt;&#x2F;a&gt; are a very old standard that still gets some use today,
perhaps most notably as part of the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;webmention&#x2F;&quot;&gt;Webmentions specification&lt;&#x2F;a&gt;.
They let you add add properties as class declarations, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;p-name u-url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;alexpetros.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Alex Petros&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Something parsing the webpage will know that this link isn&#x27;t just a random link, it&#x27;s a link with my
name as the text (&lt;code&gt;p-name&lt;&#x2F;code&gt;), and that person&#x27;s home page as the URL (&lt;code&gt;u-url&lt;&#x2F;code&gt;). This is nifty but
very limited. You could not implement a custom message using class names like this.&lt;&#x2F;p&gt;
&lt;p&gt;HTML solves this problem by reserving the &lt;code&gt;data-&lt;&#x2F;code&gt; prefix for &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Global_attributes&#x2F;data-*&quot;&gt;custom
attributes&lt;&#x2F;a&gt;. This works
fine, and some custom attribute libraries like &lt;a href=&quot;https:&#x2F;&#x2F;turbo.hotwired.dev&#x2F;&quot;&gt;Turbo&lt;&#x2F;a&gt; embrace it. Take
this example from &lt;a href=&quot;https:&#x2F;&#x2F;turbo.hotwired.dev&#x2F;handbook&#x2F;drive#requiring-confirmation-for-a-visit&quot;&gt;their
documentation&lt;&#x2F;a&gt;, which
uses the &lt;code&gt;data-turbo-method&lt;&#x2F;code&gt; attribute to change a link&#x27;s method from GET to DELETE (I make no
claims about whether that&#x27;s a thing you &lt;em&gt;should&lt;&#x2F;em&gt; do):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;articles&#x2F;54&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;data-turbo-method&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Delete the article&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that works! That will never get overwritten by future updates to the HTML standard. If you want
to write your whole attribute library that way, you can.&lt;&#x2F;p&gt;
&lt;p&gt;If I sound a little ambivalent about it, it&#x27;s because I think everything about &lt;code&gt;data-*&lt;&#x2F;code&gt; attributes,
from their name to &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2012&#x2F;10&#x2F;using-data-attributes-in-javascript-and-css&#x2F;&quot;&gt;the examples people
use&lt;&#x2F;a&gt;, suggests that
they are meant to store data, not behavior. You can of course just barrel ahead and extend HTML with
it, but the name and the verbosity really does discourage people from building semantics with it. If
you say that data attribues are for &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;HTML&#x2F;Howto&#x2F;Use_data_attributes&quot;&gt;&amp;quot;data that should be associated with a particular element but
need not have any defined
meaning,&amp;quot;&lt;&#x2F;a&gt; then
people will use them that way.&lt;&#x2F;p&gt;
&lt;p&gt;We know this is true because some very popular JavaScript libraries eschew the &lt;code&gt;data-&lt;&#x2F;code&gt; attributes
altogether and just add custom attributes with prefixes that are very &lt;em&gt;unlikely&lt;&#x2F;em&gt; to be added to
HTML. &lt;a href=&quot;https:&#x2F;&#x2F;angularjs.org&#x2F;&quot;&gt;Classic AngularJS&lt;&#x2F;a&gt; uses &lt;code&gt;ng-&lt;&#x2F;code&gt;, which is still all over the internet
today; &lt;a href=&quot;https:&#x2F;&#x2F;alpinejs.dev&#x2F;&quot;&gt;Alpine.js&lt;&#x2F;a&gt; prefixes its 15 custom attributes with &lt;code&gt;x-&lt;&#x2F;code&gt;;
&lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;&quot;&gt;htmx&lt;&#x2F;a&gt; does the same with &lt;code&gt;hx-&lt;&#x2F;code&gt; (although AngularJS and htmx both support
prepending &lt;em&gt;their&lt;&#x2F;em&gt; prefix with &lt;code&gt;data-&lt;&#x2F;code&gt;, just for the pedants).&lt;&#x2F;p&gt;
&lt;p&gt;Browsers have supported this, unofficially for ages, and it also works well. Here&#x27;s a button that
toggles some arbitrary property using Alpine.js:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x-on:click&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;open = ! open&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Toggle&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is, in my opinion, the right general idea, even though I (subjectively) dislike almost
everything about it. I find the &lt;code&gt;open = ! open&lt;&#x2F;code&gt; sort of weird (it&#x27;s a global variable I guess?),
having to namespace with &lt;code&gt;x-&lt;&#x2F;code&gt; is still a small kludge, and overall it deviates from HTML semantics
in a way I don&#x27;t vibe with. It&#x27;s a &lt;em&gt;very&lt;&#x2F;em&gt; safe bet that WHATWG is not going to add &lt;code&gt;x-on:click&lt;&#x2F;code&gt;, but
it&#x27;s also, at the time of this writing, not a guarantee.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-attributes-are-still-the-way&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#custom-attributes-are-still-the-way&quot; aria-label=&quot;Anchor link for: custom-attributes-are-still-the-way&quot;&gt;Custom attributes are (still) the way&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In 2009, during the HTML5 specification process, John Allsop advocated for taking seriously the
possibility of custom attributes in his blog &lt;a href=&quot;https:&#x2F;&#x2F;alistapart.com&#x2F;article&#x2F;semanticsinhtml5&quot;&gt;&amp;quot;Semantics in HTML
5&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of new elements, HTML 5 should adopt a number of new attributes. Each of these attributes
would relate to a category or type of semantics. For example, as I’ve detailed in another article,
HTML includes structural semantics, rhetorical semantics, role semantics (adopted from XHTML), and
other classes or categories of semantics.&lt;&#x2F;p&gt;
&lt;p&gt;These new attributes could then be used much as the class attribute is used: to attach to an element
semantics that describe the nature of the element, or to add metadata about the element.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;He includes a couple examples, like one where you markup a paragraph as being ironic (I thought this
was a ridiculous example until I remembered that &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Irony_punctuation&quot;&gt;people actually do this all the
time&lt;&#x2F;a&gt;, informally, with stuff like &amp;quot;&#x2F;s&amp;quot;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rhetoric&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;irony&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;He’s a fantastic person.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or this one that would let you specify times in a machine-paresable format (later solved with the
introduction of the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;&#x2F;code&gt;
element&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;equivalent&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;“2009-05-01”&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;May Day next year&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was the right path. The thing says what it is, and specifies machine-parseable semantics in the
most human-readable way (although &amp;quot;equivalent&amp;quot; was a terrible name choice in that case).&lt;&#x2F;p&gt;
&lt;p&gt;There are still a lot of questions that need to be answered to make this work properly, which Allsop
also acknowledged at the time:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I titled this section “some thoughts on a solution” because a significant amount of work needs to
be done to really develop a workable solution. Open questions include the following.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How many distinct semantic attributes should there be? Should these categories be extensible,
and if so, how?&lt;&#x2F;li&gt;
&lt;li&gt;How are vocabularies determined?&lt;&#x2F;li&gt;
&lt;li&gt;Do we simply invent the terms we want, in much the same way that developers have been using
class values, or should the possible values all be determined by a standardized specification? Or
should there be a mechanism for inventing (and hopefully sharing) vocabularies, using some kind of
profile?&lt;&#x2F;li&gt;
&lt;li&gt;If we have a conflict between two vocabularies, such that two identical terms are defined by two
different vocabularies, how is this resolved?&lt;&#x2F;li&gt;
&lt;li&gt;Do we need a form of name spacing, or does some other mechanism exist?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Many of these questions still don&#x27;t have good answers, because the field of web development mostly
let this question go stale during its &amp;quot;screw it, JavaScript everything&amp;quot; phase. You don&#x27;t need to
extend the behavior of a form if you &lt;a href=&quot;https:&#x2F;&#x2F;legacy.reactjs.org&#x2F;docs&#x2F;forms.html#controlled-components&quot;&gt;rewrite it every
time&lt;&#x2F;a&gt;. As we start to exit that
era, I propose that we pick up where Allsop left off and begin doing to the work making HTML a
safely extensible hypertext system.&lt;&#x2F;p&gt;
&lt;p&gt;One thing we can do immediately officially sanction is kebab-case attributes, roughly in line with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatwg&#x2F;html&#x2F;issues&#x2F;2271&quot;&gt;this proposal&lt;&#x2F;a&gt; (h&#x2F;t to &lt;a href=&quot;https:&#x2F;&#x2F;denizaksimsek.com&#x2F;en&#x2F;&quot;&gt;Deniz
Akşimşek&lt;&#x2F;a&gt; for showing me this). This would not only bless many of the
most popular HTML-enhancing frameworks, and therefore huge chunks of existing code on the internet,
with valid HTML, it would legitimatize the project of extending HTML with user- or library-defined
semantics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;okay-alex-how-would-you-extend-that-button&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#okay-alex-how-would-you-extend-that-button&quot; aria-label=&quot;Anchor link for: okay-alex-how-would-you-extend-that-button&quot;&gt;Okay Alex, how would you extend that button?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Remember the button from the beginning?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;button onclick=&quot;alert(&#x27;I\&#x27;m back!&#x27;)&quot;&gt;Click me&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to make a lot of buttons that display click messages, the best way to do that isn&#x27;t with
&lt;code&gt;onclick&lt;&#x2F;code&gt; or an event listener, it&#x27;s to enhance the button so that you can turn any button into a
message button.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;alert message&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I was clicked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Click me&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get all the buttons with the &amp;#39;alert&amp;#39; attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buttons &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;querySelectorAll&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;button[alert]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buttons&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(btn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the message property of the button
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set the button to alert that message when clicked
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the advantage of being re-usable across any button in your document. For less trivial
applications, you can bundle that behavior into a library with a very nice interface (probably with
a prefix, for now).&lt;&#x2F;p&gt;
&lt;p&gt;If you only need to do it for one or two buttons, though, just use &lt;code&gt;onclick&lt;&#x2F;code&gt;. It&#x27;s less
code, it doesn&#x27;t require that you specify an &lt;code&gt;id&lt;&#x2F;code&gt;, and it doesn&#x27;t make you hunt to a different part
of the codebase to see what it does. Those are all &amp;quot;best practices&amp;quot; in my book.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;Notes&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;denizaksimsek.com&#x2F;en&#x2F;&quot;&gt;Deniz Akşimşek&lt;&#x2F;a&gt; for reading a draft of this blog&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing the &lt;code&gt;tooShortMessage&lt;&#x2F;code&gt; and related attributes is left as an exercise to the reader.&lt;&#x2F;li&gt;
&lt;li&gt;Even better, for the button example, would probably be &lt;code&gt;type=alert&lt;&#x2F;code&gt;, because that extends the
&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;button#type&quot;&gt;existing semantics&lt;&#x2F;a&gt;, but I
really don&#x27;t want to get into how you&#x27;d approach namespacing that for forwards compatibility.&lt;&#x2F;li&gt;
&lt;li&gt;Ironically, attribute interfaces have a much better case against being defined inline than the
&lt;code&gt;document.getElementById&lt;&#x2F;code&gt; style of adding functionality, because the code that enables the
interfaces can actually be re-used generically across elements.&lt;&#x2F;li&gt;
&lt;li&gt;Some people think &amp;quot;custom semantics&amp;quot; is an oxymoron, because if it&#x27;s not in the HTML standard it&#x27;s
not &amp;quot;semantic&amp;quot;. That&#x27;s not really what semantics are. Semantics describe the expressive power of
something. Think of it like a language: whether something is or isn&#x27;t a language has nothing to do
with how many people speak it; that only affects how useful learning that language is going to be.
User-defined semantics may be non-&lt;em&gt;standard&lt;&#x2F;em&gt; (at least until they adopted officially), but they
are still semantics.&lt;&#x2F;li&gt;
&lt;li&gt;A lot of people &lt;em&gt;really&lt;&#x2F;em&gt; hate seeing even tiny amounts of JS syntax in attribute declarations. I
think this is a little silly, but I do understand it. I&#x27;ll write on that subject in the future.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Discuss this blog on: &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=38607038&quot;&gt;HackerNews&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
